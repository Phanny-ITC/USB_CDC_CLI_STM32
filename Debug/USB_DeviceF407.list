
USB_DeviceF407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08008d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          00001d14  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001eb4  20001eb4  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eca5  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d7b  00000000  00000000  0002ee75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f68  00000000  00000000  00033378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101ec  00000000  00000000  000572e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5877  00000000  00000000  000674cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cd43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cf4  00000000  00000000  0012cd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a88 	.word	0x08008a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	08008a88 	.word	0x08008a88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <cli_delay>:
//#include "usart.h"
#include "stdarg.h"

#include "usbd_cdc_if.h"

void cli_delay(int time) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fca6 	bl	8000ef0 <HAL_Delay>
#endif
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <clear_screen>:
 * Name function    : clear_screen
 * Brief            : Clear terminal screen
 * Return           : None
 */
static void clear_screen(uint8_t argc, uint8_t **argv)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  CLI_WriteString(CLEAR_SCREEN);
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <clear_screen+0x1c>)
 80005ba:	f000 f863 	bl	8000684 <CLI_WriteString>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08008aa0 	.word	0x08008aa0

080005cc <help>:
 * Name function    : help
 * Brief            : Show all commands on the terminal
 * Return           : None
 */
static void help(uint8_t argc, uint8_t **argv)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
  cli_t *temp_command = cmd_start;
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <help+0x90>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	60fb      	str	r3, [r7, #12]

  while (temp_command != NULL)
 80005de:	e035      	b.n	800064c <help+0x80>
  {
    if (0 == argc)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d113      	bne.n	800060e <help+0x42>
    {
      CLI_WriteString(BY "\n\r");
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <help+0x94>)
 80005e8:	f000 f84c 	bl	8000684 <CLI_WriteString>
      CLI_WriteString(temp_command->command);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f847 	bl	8000684 <CLI_WriteString>
      CLI_WriteString(BG "\n\r\t");
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <help+0x98>)
 80005f8:	f000 f844 	bl	8000684 <CLI_WriteString>
      CLI_WriteString(temp_command->description);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f83f 	bl	8000684 <CLI_WriteString>
      CLI_WriteString(RESET"\n\r");
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <help+0x9c>)
 8000608:	f000 f83c 	bl	8000684 <CLI_WriteString>
 800060c:	e01b      	b.n	8000646 <help+0x7a>
    }
    else
    {
      if (!(strcmp((const char*) argv, temp_command->command)))
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	6838      	ldr	r0, [r7, #0]
 8000616:	f7ff fddb 	bl	80001d0 <strcmp>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d112      	bne.n	8000646 <help+0x7a>
      {
        CLI_WriteString(BY "\n\r");
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <help+0x94>)
 8000622:	f000 f82f 	bl	8000684 <CLI_WriteString>
        CLI_WriteString(temp_command->command);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f82a 	bl	8000684 <CLI_WriteString>
        CLI_WriteString(BG "\n\r\t");
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <help+0x98>)
 8000632:	f000 f827 	bl	8000684 <CLI_WriteString>
        CLI_WriteString(temp_command->description);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f822 	bl	8000684 <CLI_WriteString>
        CLI_WriteString(RESET "\n\r");
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <help+0x9c>)
 8000642:	f000 f81f 	bl	8000684 <CLI_WriteString>
      }
    }
    temp_command = temp_command->next_command;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	60fb      	str	r3, [r7, #12]
  while (temp_command != NULL)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1c6      	bne.n	80005e0 <help+0x14>
  }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200001c0 	.word	0x200001c0
 8000660:	08008aa8 	.word	0x08008aa8
 8000664:	08008ab4 	.word	0x08008ab4
 8000668:	08008ac0 	.word	0x08008ac0

0800066c <reset>:
 * Name function    : reset
 * Brief            : Soft reset the board
 * Return           : None
 */
static void reset(uint8_t argc, uint8_t **argv)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_SystemReset();
 8000678:	f000 fd79 	bl	800116e <HAL_NVIC_SystemReset>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <CLI_WriteString>:
 * Name function    : CLI_WriteString
 * Brief            : Send null-terminated strings to terminal
 * Return           : None
 */
void CLI_WriteString(const char* s)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	while(*s){
 800068c:	e009      	b.n	80006a2 <CLI_WriteString+0x1e>
			CDC_Transmit_FS((uint8_t*) s, 1);
 800068e:	2101      	movs	r1, #1
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f006 fb11 	bl	8006cb8 <CDC_Transmit_FS>
			s++;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
		  	cli_delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff79 	bl	8000594 <cli_delay>
	while(*s){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1f1      	bne.n	800068e <CLI_WriteString+0xa>

	}
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <CLI_Printf>:
 * Name function    : CLI_Printf
 * Brief            : "printf" function for CLI
 * Return           : None
 */
void CLI_Printf(const char *format, ...)
{
 80006b4:	b40f      	push	{r0, r1, r2, r3}
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b09a      	sub	sp, #104	; 0x68
 80006ba:	af00      	add	r7, sp, #0
  char buf[LEN_INPUT_BUFFER];
  va_list arg;
  va_start(arg, format);
 80006bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006c0:	603b      	str	r3, [r7, #0]
  vsprintf(buf, format, arg);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 f915 	bl	80078f8 <vsiprintf>
  CLI_WriteString("\n\r");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <CLI_Printf+0x38>)
 80006d0:	f7ff ffd8 	bl	8000684 <CLI_WriteString>
  CLI_WriteString(buf);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffd4 	bl	8000684 <CLI_WriteString>
  va_end(arg);
}
 80006dc:	bf00      	nop
 80006de:	3768      	adds	r7, #104	; 0x68
 80006e0:	46bd      	mov	sp, r7
 80006e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e6:	b004      	add	sp, #16
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	08008b34 	.word	0x08008b34

080006f0 <CLI_Process>:
 * Name function    : CLI_Process
 * Brief            : Process the typed commands when "Return Key" is pressed.
 * Return           : None
 */
void CLI_Process(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  if (rx_data != 0)
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <CLI_Process+0x2c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00d      	beq.n	8000718 <CLI_Process+0x28>
  {
    if (CLI_GetChar(rx_data))
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <CLI_Process+0x2c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8ed 	bl	80008e0 <CLI_GetChar>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <CLI_Process+0x22>
    {
      /* print CLI prompt on console */
    	CLI_Printf(BY PROMPT " " RESET);
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <CLI_Process+0x30>)
 800070e:	f7ff ffd1 	bl	80006b4 <CLI_Printf>
    }
    rx_data = 0;
 8000712:	4b02      	ldr	r3, [pc, #8]	; (800071c <CLI_Process+0x2c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  }
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	08008b38 	.word	0x08008b38

08000724 <CLI_Init>:
 * Name function    : CLI_Init
 * Brief            : Initialize Command Line Interface on UART
 * Return           : None
 */
void CLI_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  cli_t *temp_command = (cli_t*) malloc(sizeof(cli_t));
 800072a:	2014      	movs	r0, #20
 800072c:	f006 ff4a 	bl	80075c4 <malloc>
 8000730:	4603      	mov	r3, r0
 8000732:	607b      	str	r3, [r7, #4]

  if (NULL == temp_command)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d100      	bne.n	800073c <CLI_Init+0x18>
  {
    /* lock program here, because it can't allocate new
     area memory for this variable */
    while (1);
 800073a:	e7fe      	b.n	800073a <CLI_Init+0x16>
  }
  /* add help command to the first of the list */
  cmd_list = m_cmd;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <CLI_Init+0x38>)
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <CLI_Init+0x3c>)
 8000740:	601a      	str	r2, [r3, #0]
  cmd_start = m_cmd;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <CLI_Init+0x40>)
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <CLI_Init+0x3c>)
 8000746:	601a      	str	r2, [r3, #0]

  /* add the following commands to list*/
  CLI_AddCommand(&m_cmd[1], sizeof(m_cmd)/sizeof(cli_t) - 1);
 8000748:	2102      	movs	r1, #2
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <CLI_Init+0x44>)
 800074c:	f000 f80e 	bl	800076c <CLI_AddCommand>
  CLI_ClearBuffer();
 8000750:	f000 f91a 	bl	8000988 <CLI_ClearBuffer>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200001bc 	.word	0x200001bc
 8000760:	20000004 	.word	0x20000004
 8000764:	200001c0 	.word	0x200001c0
 8000768:	20000018 	.word	0x20000018

0800076c <CLI_AddCommand>:
 * Name function    : CLI_AddCommand
 * Brief            : Add new commands to the list
 * Return           : None
 */
int8_t CLI_AddCommand(cli_t *new_command, uint8_t num_command)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  int8_t result = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	73bb      	strb	r3, [r7, #14]

  if (num_command < 1)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <CLI_AddCommand+0x1c>
  {
    result = -1;
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	73bb      	strb	r3, [r7, #14]
 8000786:	e01d      	b.n	80007c4 <CLI_AddCommand+0x58>
  }
  else
  {
    for (i = 0; i < num_command; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	e016      	b.n	80007bc <CLI_AddCommand+0x50>
    {
      cmd_list->next_command = &new_command[i];
 800078e:	7bfa      	ldrb	r2, [r7, #15]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4619      	mov	r1, r3
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <CLI_AddCommand+0x68>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	440a      	add	r2, r1
 80007a2:	611a      	str	r2, [r3, #16]
      cmd_list = cmd_list->next_command;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <CLI_AddCommand+0x68>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <CLI_AddCommand+0x68>)
 80007ac:	6013      	str	r3, [r2, #0]
      cmd_list->next_command = NULL;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <CLI_AddCommand+0x68>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
    for (i = 0; i < num_command; i++)
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	3301      	adds	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3e4      	bcc.n	800078e <CLI_AddCommand+0x22>
    }
  }

  return result;
 80007c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	200001bc 	.word	0x200001bc

080007d8 <CLI_ParseCommand>:
 * Name function    : CLI_ParseCommand
 * Brief            : Execute the command
 * Return           : None
 */
void CLI_ParseCommand(const char *str_command, const uint8_t len_command)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
  sprintf(uart_buff,"%s", str_command);
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4938      	ldr	r1, [pc, #224]	; (80008c8 <CLI_ParseCommand+0xf0>)
 80007e8:	4838      	ldr	r0, [pc, #224]	; (80008cc <CLI_ParseCommand+0xf4>)
 80007ea:	f006 fff3 	bl	80077d4 <siprintf>
  char *temp_str = NULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  uint8_t num_of_input = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	74fb      	strb	r3, [r7, #19]
  cli_t *temp_command = cmd_start;
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <CLI_ParseCommand+0xf8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	60fb      	str	r3, [r7, #12]
  uint8_t **input_parameter;

  temp_str = strtok(str_command, DELIMITER_CHARACTERS);
 80007fc:	4935      	ldr	r1, [pc, #212]	; (80008d4 <CLI_ParseCommand+0xfc>)
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f007 f808 	bl	8007814 <strtok>
 8000804:	6178      	str	r0, [r7, #20]
  while (temp_command != NULL)
 8000806:	e036      	b.n	8000876 <CLI_ParseCommand+0x9e>
  {
    if (!(strcmp(temp_str, temp_command->command)))
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff fcde 	bl	80001d0 <strcmp>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d12a      	bne.n	8000870 <CLI_ParseCommand+0x98>
    {
      input_parameter = malloc(sizeof(uint32_t) * temp_command->num_param);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fece 	bl	80075c4 <malloc>
 8000828:	4603      	mov	r3, r0
 800082a:	60bb      	str	r3, [r7, #8]
      num_of_input = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	74fb      	strb	r3, [r7, #19]
      temp_str = strtok(NULL, DELIMITER_CHARACTERS);
 8000830:	4928      	ldr	r1, [pc, #160]	; (80008d4 <CLI_ParseCommand+0xfc>)
 8000832:	2000      	movs	r0, #0
 8000834:	f006 ffee 	bl	8007814 <strtok>
 8000838:	6178      	str	r0, [r7, #20]
      while (NULL != temp_str)
 800083a:	e013      	b.n	8000864 <CLI_ParseCommand+0x8c>
      {
        if (num_of_input > temp_command->num_param)
 800083c:	7cfb      	ldrb	r3, [r7, #19]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8000844:	4293      	cmp	r3, r2
 8000846:	dc11      	bgt.n	800086c <CLI_ParseCommand+0x94>
        {
          break;
        }
        else
        {
          input_parameter[num_of_input] = (uint8_t*)temp_str;
 8000848:	7cfb      	ldrb	r3, [r7, #19]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	601a      	str	r2, [r3, #0]
          temp_str = strtok(NULL, DELIMITER_CHARACTERS);
 8000854:	491f      	ldr	r1, [pc, #124]	; (80008d4 <CLI_ParseCommand+0xfc>)
 8000856:	2000      	movs	r0, #0
 8000858:	f006 ffdc 	bl	8007814 <strtok>
 800085c:	6178      	str	r0, [r7, #20]
          num_of_input++;
 800085e:	7cfb      	ldrb	r3, [r7, #19]
 8000860:	3301      	adds	r3, #1
 8000862:	74fb      	strb	r3, [r7, #19]
      while (NULL != temp_str)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1e8      	bne.n	800083c <CLI_ParseCommand+0x64>
        }
      }
      break;
 800086a:	e007      	b.n	800087c <CLI_ParseCommand+0xa4>
          break;
 800086c:	bf00      	nop
      break;
 800086e:	e005      	b.n	800087c <CLI_ParseCommand+0xa4>
    }
    temp_command = temp_command->next_command;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	60fb      	str	r3, [r7, #12]
  while (temp_command != NULL)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1c5      	bne.n	8000808 <CLI_ParseCommand+0x30>
  }

  if (NULL != temp_command)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01a      	beq.n	80008b8 <CLI_ParseCommand+0xe0>
  {
    if (num_of_input == temp_command->num_param)
 8000882:	7cfb      	ldrb	r3, [r7, #19]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <CLI_ParseCommand+0xc4>
    {
      temp_command->entry_function(num_of_input, input_parameter);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	7cfa      	ldrb	r2, [r7, #19]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	4610      	mov	r0, r2
 8000898:	4798      	blx	r3
 800089a:	e009      	b.n	80008b0 <CLI_ParseCommand+0xd8>
    }
    else
    {
      CLI_Printf(BR "%s: expected %d argument(s), but %d found" RESET,
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6819      	ldr	r1, [r3, #0]
                 temp_command->command, temp_command->num_param, num_of_input);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
      CLI_Printf(BR "%s: expected %d argument(s), but %d found" RESET,
 80008a6:	461a      	mov	r2, r3
 80008a8:	7cfb      	ldrb	r3, [r7, #19]
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <CLI_ParseCommand+0x100>)
 80008ac:	f7ff ff02 	bl	80006b4 <CLI_Printf>
    }
    free(input_parameter);
 80008b0:	68b8      	ldr	r0, [r7, #8]
 80008b2:	f006 fe8f 	bl	80075d4 <free>
  else
  {
    CLI_Printf(BR "%s: command not found." RESET, temp_str);
  }

}
 80008b6:	e003      	b.n	80008c0 <CLI_ParseCommand+0xe8>
    CLI_Printf(BR "%s: command not found." RESET, temp_str);
 80008b8:	6979      	ldr	r1, [r7, #20]
 80008ba:	4808      	ldr	r0, [pc, #32]	; (80008dc <CLI_ParseCommand+0x104>)
 80008bc:	f7ff fefa 	bl	80006b4 <CLI_Printf>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	08008b48 	.word	0x08008b48
 80008cc:	2000022c 	.word	0x2000022c
 80008d0:	200001c0 	.word	0x200001c0
 80008d4:	08008b4c 	.word	0x08008b4c
 80008d8:	08008b50 	.word	0x08008b50
 80008dc:	08008b88 	.word	0x08008b88

080008e0 <CLI_GetChar>:
 * Name function    : CLI_GetChar
 * Brief            : Store received character depend on key press action
 * Return           : return 0 - command didn't finish; 1 - command finished
 */
uint8_t CLI_GetChar(const uint8_t c)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]
  char ch = c;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	73bb      	strb	r3, [r7, #14]
  if (c == '\r') ch = '\n';
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b0d      	cmp	r3, #13
 80008f6:	d101      	bne.n	80008fc <CLI_GetChar+0x1c>
 80008f8:	230a      	movs	r3, #10
 80008fa:	73bb      	strb	r3, [r7, #14]

  switch (ch)
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000900:	d01a      	beq.n	8000938 <CLI_GetChar+0x58>
 8000902:	2b7f      	cmp	r3, #127	; 0x7f
 8000904:	dc29      	bgt.n	800095a <CLI_GetChar+0x7a>
 8000906:	2b08      	cmp	r3, #8
 8000908:	d016      	beq.n	8000938 <CLI_GetChar+0x58>
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d125      	bne.n	800095a <CLI_GetChar+0x7a>
  {
    /* Return key pressed */
    case '\n':
      if (char_count > 0)
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <CLI_GetChar+0xa0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00a      	beq.n	800092c <CLI_GetChar+0x4c>
      {
        CLI_ParseCommand((const char*) cmd_buffer, char_count);
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <CLI_GetChar+0xa0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	4819      	ldr	r0, [pc, #100]	; (8000984 <CLI_GetChar+0xa4>)
 800091e:	f7ff ff5b 	bl	80007d8 <CLI_ParseCommand>
        memset(cmd_buffer, 0, LEN_INPUT_BUFFER);
 8000922:	2264      	movs	r2, #100	; 0x64
 8000924:	2100      	movs	r1, #0
 8000926:	4817      	ldr	r0, [pc, #92]	; (8000984 <CLI_GetChar+0xa4>)
 8000928:	f006 fe5c 	bl	80075e4 <memset>
      }
      char_count = 0;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <CLI_GetChar+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
      result = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
      break;
 8000936:	e01e      	b.n	8000976 <CLI_GetChar+0x96>

      /* Backspace detected */
    case '\b':
    case '\x7f':
      if (char_count > 0)
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <CLI_GetChar+0xa0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d019      	beq.n	8000974 <CLI_GetChar+0x94>
      {
        char_count--;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <CLI_GetChar+0xa0>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <CLI_GetChar+0xa0>)
 800094a:	701a      	strb	r2, [r3, #0]
        cmd_buffer[char_count] = 0;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <CLI_GetChar+0xa0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <CLI_GetChar+0xa4>)
 8000954:	2100      	movs	r1, #0
 8000956:	5499      	strb	r1, [r3, r2]
      }
      break;
 8000958:	e00c      	b.n	8000974 <CLI_GetChar+0x94>

    default:
      cmd_buffer[char_count] = ch;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <CLI_GetChar+0xa0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <CLI_GetChar+0xa4>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	5453      	strb	r3, [r2, r1]
      char_count++;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <CLI_GetChar+0xa0>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <CLI_GetChar+0xa0>)
 8000970:	701a      	strb	r2, [r3, #0]
      break;
 8000972:	e000      	b.n	8000976 <CLI_GetChar+0x96>
      break;
 8000974:	bf00      	nop
  }

  return result;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000228 	.word	0x20000228
 8000984:	200001c4 	.word	0x200001c4

08000988 <CLI_ClearBuffer>:
 * Name function    : CLI_ClearBuffer
 * Brief            :
 * Return           : None
 */
void CLI_ClearBuffer(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  char_count = 0;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <CLI_ClearBuffer+0x18>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  memset(cmd_buffer, 0, LEN_INPUT_BUFFER);
 8000992:	2264      	movs	r2, #100	; 0x64
 8000994:	2100      	movs	r1, #0
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <CLI_ClearBuffer+0x1c>)
 8000998:	f006 fe24 	bl	80075e4 <memset>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000228 	.word	0x20000228
 80009a4:	200001c4 	.word	0x200001c4

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fa2e 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f80c 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f000 f874 	bl	8000aa0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80009b8:	f006 f8a0 	bl	8006afc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CLI_Init();
 80009bc:	f7ff feb2 	bl	8000724 <CLI_Init>

    /* USER CODE BEGIN 3 */
//	  uint8_t buffer[] = ">>\r\n";
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  HAL_Delay(100);
	  CLI_Process();
 80009c0:	f7ff fe96 	bl	80006f0 <CLI_Process>
//	  CLI_WriteString
//	  CLI_WriteString("Hello\n\r");
	  HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fa93 	bl	8000ef0 <HAL_Delay>
	  CLI_Process();
 80009ca:	e7f9      	b.n	80009c0 <main+0x18>

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fe02 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <SystemClock_Config+0xcc>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a40:	23a8      	movs	r3, #168	; 0xa8
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 ffcf 	bl	80029f4 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 f872 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fa30 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8a:	f000 f85b 	bl	8000b44 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0xa0>)
 8000b12:	f000 fcd9 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0xa0>)
 8000b30:	f000 fb2e 	bl	8001190 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020800 	.word	0x40020800

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f960 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f000 fdce 	bl	800179a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20001778 	.word	0x20001778

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c22:	f006 fca5 	bl	8007570 <__errno>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2216      	movs	r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_exit>:

void _exit (int status)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe7 	bl	8000c18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c4a:	e7fe      	b.n	8000c4a <_exit+0x12>

08000c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
	}

return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
	}
	return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f006 fc0a 	bl	8007570 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000290 	.word	0x20000290
 8000d90:	20001eb8 	.word	0x20001eb8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f006 fbc9 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fddd 	bl	80009a8 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000dfc:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 8000e00:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000e04:	20001eb4 	.word	0x20001eb4

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f965 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe86 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f981 	bl	8001176 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f000 f945 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000040 	.word	0x20000040
 8000ea8:	20000048 	.word	0x20000048
 8000eac:	20000044 	.word	0x20000044

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000048 	.word	0x20000048
 8000ed4:	20000294 	.word	0x20000294

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000294 	.word	0x20000294

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000048 	.word	0x20000048

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <__NVIC_SystemReset+0x24>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010a6:	4904      	ldr	r1, [pc, #16]	; (80010b8 <__NVIC_SystemReset+0x24>)
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_SystemReset+0x28>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010ae:	f3bf 8f4f 	dsb	sy
}
 80010b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <__NVIC_SystemReset+0x20>
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0004 	.word	0x05fa0004

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f7ff ff78 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff13 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff28 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff78 	bl	800102c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff47 	bl	8000fd8 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff1b 	bl	8000f9c <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001172:	f7ff ff8f 	bl	8001094 <__NVIC_SystemReset>

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff9e 	bl	80010c0 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e16b      	b.n	8001484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 815a 	bne.w	800147e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80b4 	beq.w	800147e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5f      	ldr	r2, [pc, #380]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20a>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x310>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae90 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fc:	b08f      	sub	sp, #60	; 0x3c
 80014fe:	af0a      	add	r7, sp, #40	; 0x28
 8001500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e10f      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f005 fd0e 	bl	8006f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 ffd5 	bl	80034fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	687e      	ldr	r6, [r7, #4]
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800156a:	e885 0003 	stmia.w	r5, {r0, r1}
 800156e:	1d33      	adds	r3, r6, #4
 8001570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f001 feac 	bl	80032d0 <USB_CoreInit>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0d0      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f001 ffc3 	bl	800351c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e04a      	b.n	8001632 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	333d      	adds	r3, #61	; 0x3d
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	333c      	adds	r3, #60	; 0x3c
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b298      	uxth	r0, r3
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3344      	adds	r3, #68	; 0x44
 80015d8:	4602      	mov	r2, r0
 80015da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3340      	adds	r3, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3348      	adds	r3, #72	; 0x48
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	334c      	adds	r3, #76	; 0x4c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3354      	adds	r3, #84	; 0x54
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3af      	bcc.n	800159c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e044      	b.n	80016cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3b5      	bcc.n	8001642 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	687e      	ldr	r6, [r7, #4]
 80016de:	466d      	mov	r5, sp
 80016e0:	f106 0410 	add.w	r4, r6, #16
 80016e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f4:	1d33      	adds	r3, r6, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f001 ff5b 	bl	80035b4 <USB_DevInit>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00d      	b.n	800172c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f8aa 	bl	800487e <USB_DevDisconnect>

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001734 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_PCD_Start+0x1c>
 800174c:	2302      	movs	r3, #2
 800174e:	e020      	b.n	8001792 <HAL_PCD_Start+0x5e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fead 	bl	80034d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f85a 	bl	800483c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800179a:	b590      	push	{r4, r7, lr}
 800179c:	b08d      	sub	sp, #52	; 0x34
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 f918 	bl	80049e6 <USB_GetMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 848a 	bne.w	80020d2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f87c 	bl	80048c0 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8480 	beq.w	80020d0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 f869 	bl	80048c0 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d107      	bne.n	8001808 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f002 0202 	and.w	r2, r2, #2
 8001806:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f857 	bl	80048c0 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b10      	cmp	r3, #16
 800181a:	d161      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0210 	bic.w	r2, r2, #16
 800182a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	0c5b      	lsrs	r3, r3, #17
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	2b02      	cmp	r3, #2
 8001856:	d124      	bne.n	80018a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d035      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800186e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	6a38      	ldr	r0, [r7, #32]
 8001878:	f002 fe8e 	bl	8004598 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001888:	441a      	add	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800189a:	441a      	add	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	e016      	b.n	80018d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	0c5b      	lsrs	r3, r3, #17
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d110      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018b4:	2208      	movs	r2, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	6a38      	ldr	r0, [r7, #32]
 80018ba:	f002 fe6d 	bl	8004598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ca:	441a      	add	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0210 	orr.w	r2, r2, #16
 80018de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 ffeb 	bl	80048c0 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018f4:	f040 80a7 	bne.w	8001a46 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fff0 	bl	80048e6 <USB_ReadDevAllOutEpInterrupt>
 8001906:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001908:	e099      	b.n	8001a3e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 808e 	beq.w	8001a32 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f003 f814 	bl	800494e <USB_ReadDevOutEPInterrupt>
 8001926:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2301      	movs	r3, #1
 8001942:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fec2 	bl	80026d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001962:	461a      	mov	r2, r3
 8001964:	2308      	movs	r3, #8
 8001966:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 ff98 	bl	80028a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001986:	461a      	mov	r2, r3
 8001988:	2310      	movs	r3, #16
 800198a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d030      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	2b80      	cmp	r3, #128	; 0x80
 80019a0:	d109      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f005 fbb7 	bl	8007154 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f2:	461a      	mov	r2, r3
 80019f4:	2302      	movs	r3, #2
 80019f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2320      	movs	r3, #32
 8001a12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f af62 	bne.w	800190a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ff38 	bl	80048c0 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a5a:	f040 80db 	bne.w	8001c14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 ff59 	bl	800491a <USB_ReadDevAllInEpInterrupt>
 8001a68:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a6e:	e0cd      	b.n	8001c0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80c2 	beq.w	8001c00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 ff7f 	bl	800498a <USB_ReadDevInEPInterrupt>
 8001a8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d057      	beq.n	8001b48 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69f9      	ldr	r1, [r7, #28]
 8001ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ab8:	4013      	ands	r3, r2
 8001aba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2301      	movs	r3, #1
 8001acc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d132      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	334c      	adds	r3, #76	; 0x4c
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4403      	add	r3, r0
 8001af6:	3348      	adds	r3, #72	; 0x48
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4419      	add	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4403      	add	r3, r0
 8001b0a:	334c      	adds	r3, #76	; 0x4c
 8001b0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d113      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x3a2>
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3354      	adds	r3, #84	; 0x54
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b34:	461a      	mov	r2, r3
 8001b36:	2101      	movs	r1, #1
 8001b38:	f002 ff86 	bl	8004a48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f005 fa81 	bl	800704a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2308      	movs	r3, #8
 8001b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b96:	461a      	mov	r2, r3
 8001b98:	2340      	movs	r3, #64	; 0x40
 8001b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba8:	6a38      	ldr	r0, [r7, #32]
 8001baa:	f001 fe67 	bl	800387c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	3338      	adds	r3, #56	; 0x38
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	78db      	ldrb	r3, [r3, #3]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 face 	bl	8007178 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be8:	461a      	mov	r2, r3
 8001bea:	2302      	movs	r3, #2
 8001bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fcdb 	bl	80025b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f47f af2e 	bne.w	8001a70 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fe51 	bl	80048c0 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c28:	d122      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c50:	2100      	movs	r1, #0
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fec2 	bl	80029dc <HAL_PCDEx_LPM_Callback>
 8001c58:	e002      	b.n	8001c60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f005 fa6c 	bl	8007138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fe23 	bl	80048c0 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c84:	d112      	bne.n	8001cac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f005 fa28 	bl	80070ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001caa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fe05 	bl	80048c0 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc0:	f040 80b7 	bne.w	8001e32 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2110      	movs	r1, #16
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 fdcc 	bl	800387c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce8:	e046      	b.n	8001d78 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cfc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	0151      	lsls	r1, r2, #5
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	440a      	add	r2, r1
 8001d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d42:	0151      	lsls	r1, r2, #5
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	440a      	add	r2, r1
 8001d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d62:	0151      	lsls	r1, r2, #5
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	440a      	add	r2, r1
 8001d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	3301      	adds	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3b3      	bcc.n	8001cea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dae:	f043 030b 	orr.w	r3, r3, #11
 8001db2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc4:	f043 030b 	orr.w	r3, r3, #11
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	e015      	b.n	8001df8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dde:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001de2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df2:	f043 030b 	orr.w	r3, r3, #11
 8001df6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f002 fe13 	bl	8004a48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fd42 	bl	80048c0 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e46:	d124      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fdd8 	bl	8004a02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fd8d 	bl	8003976 <USB_GetDevSpeed>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681c      	ldr	r4, [r3, #0]
 8001e68:	f001 fa26 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	4620      	mov	r0, r4
 8001e78:	f001 fa8c 	bl	8003394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f005 f90c 	bl	800709a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fd12 	bl	80048c0 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d10a      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 f8e9 	bl	800707e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f002 0208 	and.w	r2, r2, #8
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fcfd 	bl	80048c0 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d122      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee0:	e014      	b.n	8001f0c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fb27 	bl	8002554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3e5      	bcc.n	8001ee2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fcd0 	bl	80048c0 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f2a:	d13b      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	e02b      	b.n	8001f8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3340      	adds	r3, #64	; 0x40
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d115      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da12      	bge.n	8001f84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fae8 	bl	8002554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	3301      	adds	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3ce      	bcc.n	8001f32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fc89 	bl	80048c0 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb8:	d155      	bne.n	8002066 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fba:	2301      	movs	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	e045      	b.n	800204c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d12e      	bne.n	8002046 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fe8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da2b      	bge.n	8002046 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ffa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d121      	bne.n	8002046 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6053      	str	r3, [r2, #4]
            break;
 8002044:	e007      	b.n	8002056 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	429a      	cmp	r2, r3
 8002054:	d3b4      	bcc.n	8001fc0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fc28 	bl	80048c0 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d10a      	bne.n	8002092 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f005 f88d 	bl	800719c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fc12 	bl	80048c0 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d115      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f005 f87d 	bl	80071b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	e000      	b.n	80020d2 <HAL_PCD_IRQHandler+0x938>
      return;
 80020d0:	bf00      	nop
    }
  }
}
 80020d2:	3734      	adds	r7, #52	; 0x34
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_SetAddress+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e013      	b.n	800211a <HAL_PCD_SetAddress+0x42>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fb70 	bl	80047f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	461a      	mov	r2, r3
 8002130:	4603      	mov	r3, r0
 8002132:	70fb      	strb	r3, [r7, #3]
 8002134:	460b      	mov	r3, r1
 8002136:	803b      	strh	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da0f      	bge.n	8002168 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3338      	adds	r3, #56	; 0x38
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	705a      	strb	r2, [r3, #1]
 8002166:	e00f      	b.n	8002188 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 020f 	and.w	r2, r3, #15
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002194:	883a      	ldrh	r2, [r7, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	78ba      	ldrb	r2, [r7, #2]
 800219e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021b2:	78bb      	ldrb	r3, [r7, #2]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d102      	bne.n	80021be <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_PCD_EP_Open+0xaa>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e00e      	b.n	80021ea <HAL_PCD_EP_Open+0xc8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 fbf0 	bl	80039c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80021e8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da0f      	bge.n	8002226 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	3338      	adds	r3, #56	; 0x38
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	705a      	strb	r2, [r3, #1]
 8002224:	e00f      	b.n	8002246 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 020f 	and.w	r2, r3, #15
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_EP_Close+0x6e>
 800225c:	2302      	movs	r3, #2
 800225e:	e00e      	b.n	800227e <HAL_PCD_EP_Close+0x8c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fc2e 	bl	8003ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	460b      	mov	r3, r1
 8002294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	f003 020f 	and.w	r2, r3, #15
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	f001 ff0d 	bl	8004118 <USB_EP0StartXfer>
 80022fe:	e008      	b.n	8002312 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	f001 fcbb 	bl	8003c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	460b      	mov	r3, r1
 800235a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	3338      	adds	r3, #56	; 0x38
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	b2da      	uxtb	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	f001 feab 	bl	8004118 <USB_EP0StartXfer>
 80023c2:	e008      	b.n	80023d6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	f001 fc59 	bl	8003c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d901      	bls.n	80023fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e050      	b.n	80024a0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0f      	bge.n	8002426 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3338      	adds	r3, #56	; 0x38
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	e00d      	b.n	8002442 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_PCD_EP_SetStall+0x82>
 800245e:	2302      	movs	r3, #2
 8002460:	e01e      	b.n	80024a0 <HAL_PCD_EP_SetStall+0xc0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 f8e9 	bl	8004648 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	b2d9      	uxtb	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002490:	461a      	mov	r2, r3
 8002492:	f002 fad9 	bl	8004a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d901      	bls.n	80024c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e042      	b.n	800254c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da0f      	bge.n	80024ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	3338      	adds	r3, #56	; 0x38
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	705a      	strb	r2, [r3, #1]
 80024ec:	e00f      	b.n	800250e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_PCD_EP_ClrStall+0x86>
 800252a:	2302      	movs	r3, #2
 800252c:	e00e      	b.n	800254c <HAL_PCD_EP_ClrStall+0xa4>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	4618      	mov	r0, r3
 800253e:	f002 f8f1 	bl	8004724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0c      	bge.n	8002582 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3338      	adds	r3, #56	; 0x38
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e00c      	b.n	800259c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 020f 	and.w	r2, r3, #15
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 ff10 	bl	80043c8 <USB_EPStopXfer>
 80025a8:	4603      	mov	r3, r0
 80025aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	; 0x28
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3338      	adds	r3, #56	; 0x38
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d901      	bls.n	80025ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06c      	b.n	80026c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	429a      	cmp	r2, r3
 8002602:	d902      	bls.n	800260a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3303      	adds	r3, #3
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002612:	e02b      	b.n	800266c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	429a      	cmp	r2, r3
 8002628:	d902      	bls.n	8002630 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3303      	adds	r3, #3
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6919      	ldr	r1, [r3, #16]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002648:	b2db      	uxtb	r3, r3
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f001 ff64 	bl	800451c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	441a      	add	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	441a      	add	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	b29b      	uxth	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	429a      	cmp	r2, r3
 8002680:	d809      	bhi.n	8002696 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800268a:	429a      	cmp	r2, r3
 800268c:	d203      	bcs.n	8002696 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1be      	bne.n	8002614 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d811      	bhi.n	80026c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	2201      	movs	r2, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026c2:	4013      	ands	r3, r2
 80026c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	333c      	adds	r3, #60	; 0x3c
 80026e8:	3304      	adds	r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d17b      	bne.n	80027fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4a61      	ldr	r2, [pc, #388]	; (8002898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f240 80b9 	bls.w	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80b3 	beq.w	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	461a      	mov	r2, r3
 8002734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002738:	6093      	str	r3, [r2, #8]
 800273a:	e0a7      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	461a      	mov	r2, r3
 8002754:	2320      	movs	r3, #32
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e098      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 8093 	bne.w	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d90f      	bls.n	800278e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	e07e      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d114      	bne.n	80027f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027d8:	461a      	mov	r2, r3
 80027da:	2101      	movs	r1, #1
 80027dc:	f002 f934 	bl	8004a48 <USB_EP0_OutStart>
 80027e0:	e006      	b.n	80027f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	441a      	add	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f004 fc0c 	bl	8007014 <HAL_PCD_DataOutStageCallback>
 80027fc:	e046      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d124      	bne.n	8002850 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281c:	461a      	mov	r2, r3
 800281e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002822:	6093      	str	r3, [r2, #8]
 8002824:	e032      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	2320      	movs	r3, #32
 8002840:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f004 fbe3 	bl	8007014 <HAL_PCD_DataOutStageCallback>
 800284e:	e01d      	b.n	800288c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d114      	bne.n	8002880 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002878:	461a      	mov	r2, r3
 800287a:	2100      	movs	r1, #0
 800287c:	f002 f8e4 	bl	8004a48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f004 fbc4 	bl	8007014 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	4f54300a 	.word	0x4f54300a
 800289c:	4f54310a 	.word	0x4f54310a

080028a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	333c      	adds	r3, #60	; 0x3c
 80028b8:	3304      	adds	r3, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <PCD_EP_OutSetupPacket_int+0x88>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d90e      	bls.n	80028f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f004 fb7b 	bl	8006ff0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <PCD_EP_OutSetupPacket_int+0x88>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d90c      	bls.n	800291c <PCD_EP_OutSetupPacket_int+0x7c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002914:	461a      	mov	r2, r3
 8002916:	2101      	movs	r1, #1
 8002918:	f002 f896 	bl	8004a48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	4f54300a 	.word	0x4f54300a

0800292c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
 8002938:	4613      	mov	r3, r2
 800293a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800294a:	883b      	ldrh	r3, [r7, #0]
 800294c:	0419      	lsls	r1, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	430a      	orrs	r2, r1
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	e028      	b.n	80029ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	4413      	add	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e00d      	b.n	800298a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	3340      	adds	r3, #64	; 0x40
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	3b01      	subs	r3, #1
 8002990:	429a      	cmp	r2, r3
 8002992:	d3ec      	bcc.n	800296e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002994:	883b      	ldrh	r3, [r7, #0]
 8002996:	0418      	lsls	r0, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	3b01      	subs	r3, #1
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4302      	orrs	r2, r0
 80029a4:	3340      	adds	r3, #64	; 0x40
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e267      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d075      	beq.n	8002afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b85      	ldr	r3, [pc, #532]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e242      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x74>
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6f      	ldr	r2, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6c      	ldr	r2, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a68      	ldr	r2, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa14 	bl	8000ed8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fa10 	bl	8000ed8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e207      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fa00 	bl	8000ed8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe f9fc 	bl	8000ed8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1f3      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1c7      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f9b5 	bl	8000ed8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe f9b1 	bl	8000ed8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1a8      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4925      	ldr	r1, [pc, #148]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe f994 	bl	8000ed8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe f990 	bl	8000ed8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e187      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d036      	beq.n	8002c4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe f974 	bl	8000ed8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fe f970 	bl	8000ed8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e167      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x200>
 8002c12:	e01b      	b.n	8002c4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe f95d 	bl	8000ed8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fe f959 	bl	8000ed8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d907      	bls.n	8002c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e150      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470000 	.word	0x42470000
 8002c3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ea      	bne.n	8002c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8097 	beq.w	8002d88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a7c      	ldr	r2, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe f919 	bl	8000ed8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe f915 	bl	8000ed8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e10c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x2ea>
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x30c>
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a5e      	ldr	r2, [pc, #376]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	4b5c      	ldr	r3, [pc, #368]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002d00:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a54      	ldr	r2, [pc, #336]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe f8da 	bl	8000ed8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe f8d6 	bl	8000ed8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0cb      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ee      	beq.n	8002d28 <HAL_RCC_OscConfig+0x334>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe f8c4 	bl	8000ed8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe f8c0 	bl	8000ed8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0b5      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ee      	bne.n	8002d54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a38      	ldr	r2, [pc, #224]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a1 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d05c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d141      	bne.n	8002e2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe f894 	bl	8000ed8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe f890 	bl	8000ed8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e087      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	491b      	ldr	r1, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe f869 	bl	8000ed8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe f865 	bl	8000ed8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e05c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x416>
 8002e28:	e054      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe f852 	bl	8000ed8 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe f84e 	bl	8000ed8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e045      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x444>
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e038      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d028      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d121      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d111      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0cc      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d90c      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f50:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	494d      	ldr	r1, [pc, #308]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d044      	beq.n	8003004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d119      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e067      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4934      	ldr	r1, [pc, #208]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd4:	f7fd ff80 	bl	8000ed8 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7fd ff7c 	bl	8000ed8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d20c      	bcs.n	800302c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e032      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4916      	ldr	r1, [pc, #88]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306a:	f000 f821 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800306e:	4602      	mov	r2, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	490a      	ldr	r1, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	5ccb      	ldrb	r3, [r1, r3]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fee0 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023c00 	.word	0x40023c00
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08008bf8 	.word	0x08008bf8
 80030a8:	20000040 	.word	0x20000040
 80030ac:	20000044 	.word	0x20000044

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b094      	sub	sp, #80	; 0x50
 80030b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
 80030bc:	2300      	movs	r3, #0
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c0:	2300      	movs	r3, #0
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c8:	4b79      	ldr	r3, [pc, #484]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x40>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f200 80e1 	bhi.w	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x34>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x3a>
 80030e2:	e0db      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030e8:	e0db      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ee:	e0d8      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f0:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fa:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003106:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	2200      	movs	r2, #0
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003110:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
 800311a:	2300      	movs	r3, #0
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
 800311e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	f04f 0000 	mov.w	r0, #0
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	0159      	lsls	r1, r3, #5
 8003130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003134:	0150      	lsls	r0, r2, #5
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4621      	mov	r1, r4
 800313c:	1a51      	subs	r1, r2, r1
 800313e:	6139      	str	r1, [r7, #16]
 8003140:	4629      	mov	r1, r5
 8003142:	eb63 0301 	sbc.w	r3, r3, r1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003154:	4659      	mov	r1, fp
 8003156:	018b      	lsls	r3, r1, #6
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800315e:	4651      	mov	r1, sl
 8003160:	018a      	lsls	r2, r1, #6
 8003162:	4651      	mov	r1, sl
 8003164:	ebb2 0801 	subs.w	r8, r2, r1
 8003168:	4659      	mov	r1, fp
 800316a:	eb63 0901 	sbc.w	r9, r3, r1
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800317e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003182:	4690      	mov	r8, r2
 8003184:	4699      	mov	r9, r3
 8003186:	4623      	mov	r3, r4
 8003188:	eb18 0303 	adds.w	r3, r8, r3
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	462b      	mov	r3, r5
 8003190:	eb49 0303 	adc.w	r3, r9, r3
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031a2:	4629      	mov	r1, r5
 80031a4:	028b      	lsls	r3, r1, #10
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031ac:	4621      	mov	r1, r4
 80031ae:	028a      	lsls	r2, r1, #10
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031c0:	f7fd f866 	bl	8000290 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031cc:	e058      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	2200      	movs	r2, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	4611      	mov	r1, r2
 80031da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4641      	mov	r1, r8
 8003202:	ebb2 0a01 	subs.w	sl, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb63 0b01 	sbc.w	fp, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003218:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800321c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003220:	ebb2 040a 	subs.w	r4, r2, sl
 8003224:	eb63 050b 	sbc.w	r5, r3, fp
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00eb      	lsls	r3, r5, #3
 8003232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003236:	00e2      	lsls	r2, r4, #3
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4643      	mov	r3, r8
 800323e:	18e3      	adds	r3, r4, r3
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	464b      	mov	r3, r9
 8003244:	eb45 0303 	adc.w	r3, r5, r3
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003256:	4629      	mov	r1, r5
 8003258:	028b      	lsls	r3, r1, #10
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003260:	4621      	mov	r1, r4
 8003262:	028a      	lsls	r2, r1, #10
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	61fa      	str	r2, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	f7fd f80c 	bl	8000290 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800329a:	e002      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3750      	adds	r7, #80	; 0x50
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000040 	.word	0x20000040

080032d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032d0:	b084      	sub	sp, #16
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	f107 001c 	add.w	r0, r7, #28
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d122      	bne.n	800332e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 fbee 	bl	8004b04 <USB_CoreReset>
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e01a      	b.n	8003364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f001 fbe2 	bl	8004b04 <USB_CoreReset>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
 8003356:	e005      	b.n	8003364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10b      	bne.n	8003382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f043 0206 	orr.w	r2, r3, #6
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800338e:	b004      	add	sp, #16
 8003390:	4770      	bx	lr
	...

08003394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d165      	bne.n	8003474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a41      	ldr	r2, [pc, #260]	; (80034b0 <USB_SetTurnaroundTime+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d906      	bls.n	80033be <USB_SetTurnaroundTime+0x2a>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <USB_SetTurnaroundTime+0x120>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d202      	bcs.n	80033be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033b8:	230f      	movs	r3, #15
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e062      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4a3c      	ldr	r2, [pc, #240]	; (80034b4 <USB_SetTurnaroundTime+0x120>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d306      	bcc.n	80033d4 <USB_SetTurnaroundTime+0x40>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4a3b      	ldr	r2, [pc, #236]	; (80034b8 <USB_SetTurnaroundTime+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d202      	bcs.n	80033d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033ce:	230e      	movs	r3, #14
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e057      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <USB_SetTurnaroundTime+0x124>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d306      	bcc.n	80033ea <USB_SetTurnaroundTime+0x56>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a37      	ldr	r2, [pc, #220]	; (80034bc <USB_SetTurnaroundTime+0x128>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d202      	bcs.n	80033ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80033e4:	230d      	movs	r3, #13
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e04c      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4a33      	ldr	r2, [pc, #204]	; (80034bc <USB_SetTurnaroundTime+0x128>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d306      	bcc.n	8003400 <USB_SetTurnaroundTime+0x6c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <USB_SetTurnaroundTime+0x12c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d802      	bhi.n	8003400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80033fa:	230c      	movs	r3, #12
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e041      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <USB_SetTurnaroundTime+0x12c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d906      	bls.n	8003416 <USB_SetTurnaroundTime+0x82>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a2e      	ldr	r2, [pc, #184]	; (80034c4 <USB_SetTurnaroundTime+0x130>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d802      	bhi.n	8003416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003410:	230b      	movs	r3, #11
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e036      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <USB_SetTurnaroundTime+0x130>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d906      	bls.n	800342c <USB_SetTurnaroundTime+0x98>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <USB_SetTurnaroundTime+0x134>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d802      	bhi.n	800342c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003426:	230a      	movs	r3, #10
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e02b      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <USB_SetTurnaroundTime+0x134>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d906      	bls.n	8003442 <USB_SetTurnaroundTime+0xae>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a25      	ldr	r2, [pc, #148]	; (80034cc <USB_SetTurnaroundTime+0x138>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d202      	bcs.n	8003442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800343c:	2309      	movs	r3, #9
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e020      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <USB_SetTurnaroundTime+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d306      	bcc.n	8003458 <USB_SetTurnaroundTime+0xc4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <USB_SetTurnaroundTime+0x13c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003452:	2308      	movs	r3, #8
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e015      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <USB_SetTurnaroundTime+0x13c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d906      	bls.n	800346e <USB_SetTurnaroundTime+0xda>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <USB_SetTurnaroundTime+0x140>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d202      	bcs.n	800346e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003468:	2307      	movs	r3, #7
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e00a      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800346e:	2306      	movs	r3, #6
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e007      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800347a:	2309      	movs	r3, #9
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e001      	b.n	8003484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003480:	2309      	movs	r3, #9
 8003482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	00d8acbf 	.word	0x00d8acbf
 80034b4:	00e4e1c0 	.word	0x00e4e1c0
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	01067380 	.word	0x01067380
 80034c0:	011a499f 	.word	0x011a499f
 80034c4:	01312cff 	.word	0x01312cff
 80034c8:	014ca43f 	.word	0x014ca43f
 80034cc:	016e3600 	.word	0x016e3600
 80034d0:	01a6ab1f 	.word	0x01a6ab1f
 80034d4:	01e84800 	.word	0x01e84800

080034d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d115      	bne.n	800356a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800354a:	2001      	movs	r0, #1
 800354c:	f7fd fcd0 	bl	8000ef0 <HAL_Delay>
      ms++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f001 fa45 	bl	80049e6 <USB_GetMode>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d01e      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b31      	cmp	r3, #49	; 0x31
 8003566:	d9f0      	bls.n	800354a <USB_SetCurrentMode+0x2e>
 8003568:	e01a      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d115      	bne.n	800359c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800357c:	2001      	movs	r0, #1
 800357e:	f7fd fcb7 	bl	8000ef0 <HAL_Delay>
      ms++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f001 fa2c 	bl	80049e6 <USB_GetMode>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b31      	cmp	r3, #49	; 0x31
 8003598:	d9f0      	bls.n	800357c <USB_SetCurrentMode+0x60>
 800359a:	e001      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e005      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b32      	cmp	r3, #50	; 0x32
 80035a4:	d101      	bne.n	80035aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b4:	b084      	sub	sp, #16
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e009      	b.n	80035e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3340      	adds	r3, #64	; 0x40
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3301      	adds	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0e      	cmp	r3, #14
 80035ec:	d9f2      	bls.n	80035d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
 800362c:	e00b      	b.n	8003646 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800364c:	461a      	mov	r2, r3
 800364e:	2300      	movs	r3, #0
 8003650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	4619      	mov	r1, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	461a      	mov	r2, r3
 8003662:	680b      	ldr	r3, [r1, #0]
 8003664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003672:	2100      	movs	r1, #0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f965 	bl	8003944 <USB_SetDevSpeed>
 800367a:	e008      	b.n	800368e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800367c:	2101      	movs	r1, #1
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f960 	bl	8003944 <USB_SetDevSpeed>
 8003684:	e003      	b.n	800368e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003686:	2103      	movs	r1, #3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f95b 	bl	8003944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800368e:	2110      	movs	r1, #16
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8f3 	bl	800387c <USB_FlushTxFifo>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f91f 	bl	80038e4 <USB_FlushRxFifo>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e043      	b.n	8003762 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f0:	d118      	bne.n	8003724 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e013      	b.n	8003736 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	461a      	mov	r2, r3
 800371c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e008      	b.n	8003736 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	2300      	movs	r3, #0
 8003734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	461a      	mov	r2, r3
 8003756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800375a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d3b7      	bcc.n	80036da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e043      	b.n	80037f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003786:	d118      	bne.n	80037ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e013      	b.n	80037cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e008      	b.n	80037cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b7      	bcc.n	8003770 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <USB_DevInit+0x2c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr
 8003878:	803c3800 	.word	0x803c3800

0800387c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <USB_FlushTxFifo+0x64>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e01b      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	daf2      	bge.n	800388a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	019b      	lsls	r3, r3, #6
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <USB_FlushTxFifo+0x64>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e006      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d0f0      	beq.n	80038b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	00030d40 	.word	0x00030d40

080038e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <USB_FlushRxFifo+0x5c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e018      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	daf2      	bge.n	80038f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2210      	movs	r2, #16
 8003912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <USB_FlushRxFifo+0x5c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d0f0      	beq.n	8003914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
 800399a:	e00a      	b.n	80039b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d002      	beq.n	80039a8 <USB_GetDevSpeed+0x32>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d102      	bne.n	80039ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039a8:	2302      	movs	r3, #2
 80039aa:	75fb      	strb	r3, [r7, #23]
 80039ac:	e001      	b.n	80039b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039ae:	230f      	movs	r3, #15
 80039b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13a      	bne.n	8003a52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d155      	bne.n	8003ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	059b      	lsls	r3, r3, #22
 8003a36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e036      	b.n	8003ac0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d161      	bne.n	8003bb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b02:	d11f      	bne.n	8003b44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	0151      	lsls	r1, r2, #5
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	440a      	add	r2, r1
 8003b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b64:	4013      	ands	r3, r2
 8003b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0159      	lsls	r1, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <USB_DeactivateEndpoint+0x1b0>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
 8003bae:	e060      	b.n	8003c72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc6:	d11f      	bne.n	8003c08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003be6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	43db      	mvns	r3, r3
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c28:	4013      	ands	r3, r2
 8003c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	43db      	mvns	r3, r3
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <USB_DeactivateEndpoint+0x1b4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	ec337800 	.word	0xec337800
 8003c84:	eff37800 	.word	0xeff37800

08003c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 815c 	bne.w	8003f62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d132      	bne.n	8003d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	0cdb      	lsrs	r3, r3, #19
 8003d12:	04db      	lsls	r3, r3, #19
 8003d14:	6113      	str	r3, [r2, #16]
 8003d16:	e074      	b.n	8003e02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d32:	0cdb      	lsrs	r3, r3, #19
 8003d34:	04db      	lsls	r3, r3, #19
 8003d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	440b      	add	r3, r1
 8003d74:	1e59      	subs	r1, r3, #1
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d80:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <USB_EPStartXfer+0x370>)
 8003d82:	400b      	ands	r3, r1
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	0148      	lsls	r0, r1, #5
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	0148      	lsls	r0, r1, #5
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	4401      	add	r1, r0
 8003db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	791b      	ldrb	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d11f      	bne.n	8003e02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d14b      	bne.n	8003ea0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	791b      	ldrb	r3, [r3, #4]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d128      	bne.n	8003e7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e00f      	b.n	8003e7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e133      	b.n	8004108 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d015      	beq.n	8003ef4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 811b 	beq.w	8004108 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	69f9      	ldr	r1, [r7, #28]
 8003eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8003ef2:	e109      	b.n	8004108 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d110      	bne.n	8003f26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e00f      	b.n	8003f46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	b298      	uxth	r0, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fade 	bl	800451c <USB_WritePacket>
 8003f60:	e0d2      	b.n	8004108 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7c:	0cdb      	lsrs	r3, r3, #19
 8003f7e:	04db      	lsls	r3, r3, #19
 8003f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d126      	bne.n	8003ffc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	0148      	lsls	r0, r1, #5
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	4401      	add	r1, r0
 8003fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff2:	6113      	str	r3, [r2, #16]
 8003ff4:	e03a      	b.n	800406c <USB_EPStartXfer+0x3e4>
 8003ff6:	bf00      	nop
 8003ff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4413      	add	r3, r2
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	8afa      	ldrh	r2, [r7, #22]
 8004018:	fb03 f202 	mul.w	r2, r3, r2
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	8afb      	ldrh	r3, [r7, #22]
 8004030:	04d9      	lsls	r1, r3, #19
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <USB_EPStartXfer+0x48c>)
 8004034:	400b      	ands	r3, r1
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	0148      	lsls	r0, r1, #5
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	4401      	add	r1, r0
 800403e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004042:	4313      	orrs	r3, r2
 8004044:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6919      	ldr	r1, [r3, #16]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	460a      	mov	r2, r1
 800408c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	791b      	ldrb	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d128      	bne.n	80040e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00f      	b.n	80040e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	1ff80000 	.word	0x1ff80000

08004118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 80ce 	bne.w	80042d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	0cdb      	lsrs	r3, r3, #19
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	e04e      	b.n	8004246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800421e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	0148      	lsls	r0, r1, #5
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	4401      	add	r1, r0
 800423e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11e      	bne.n	800428a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e097      	b.n	80043ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8083 	beq.w	80043ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d0:	4313      	orrs	r3, r2
 80042d2:	634b      	str	r3, [r1, #52]	; 0x34
 80042d4:	e071      	b.n	80043ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f0:	0cdb      	lsrs	r3, r3, #19
 80042f2:	04db      	lsls	r3, r3, #19
 80042f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004318:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004350:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	0148      	lsls	r0, r1, #5
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	4401      	add	r1, r0
 8004370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	460a      	mov	r2, r1
 8004398:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d14a      	bne.n	800447c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fe:	f040 8086 	bne.w	800450e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004424:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f242 7210 	movw	r2, #10000	; 0x2710
 8004456:	4293      	cmp	r3, r2
 8004458:	d902      	bls.n	8004460 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
          break;
 800445e:	e056      	b.n	800450e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004478:	d0e7      	beq.n	800444a <USB_EPStopXfer+0x82>
 800447a:	e048      	b.n	800450e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004494:	d13b      	bne.n	800450e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d902      	bls.n	80044f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
          break;
 80044f2:	e00c      	b.n	800450e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450c:	d0e7      	beq.n	80044de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	460b      	mov	r3, r1
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	4613      	mov	r3, r2
 8004530:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800453a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d123      	bne.n	800458a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	3303      	adds	r3, #3
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e018      	b.n	8004582 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	031a      	lsls	r2, r3, #12
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	461a      	mov	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3301      	adds	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	3301      	adds	r3, #1
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d3e2      	bcc.n	8004550 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3724      	adds	r7, #36	; 0x24
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004598:	b480      	push	{r7}
 800459a:	b08b      	sub	sp, #44	; 0x2c
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	e014      	b.n	80045ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	3301      	adds	r3, #1
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3301      	adds	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	3301      	adds	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	3301      	adds	r3, #1
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3e6      	bcc.n	80045c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	461a      	mov	r2, r3
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	701a      	strb	r2, [r3, #0]
      i++;
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	3301      	adds	r3, #1
 8004626:	623b      	str	r3, [r7, #32]
      pDest++;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	3301      	adds	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800462e:	8bfb      	ldrh	r3, [r7, #30]
 8004630:	3b01      	subs	r3, #1
 8004632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ea      	bne.n	8004610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800463c:	4618      	mov	r0, r3
 800463e:	372c      	adds	r7, #44	; 0x2c
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d12c      	bne.n	80046be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db12      	blt.n	800469c <USB_EPSetStall+0x54>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00f      	beq.n	800469c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e02b      	b.n	8004716 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db12      	blt.n	80046f6 <USB_EPSetStall+0xae>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d128      	bne.n	8004792 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800475e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d003      	beq.n	8004770 <USB_EPClearStall+0x4c>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d138      	bne.n	80047e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e027      	b.n	80047e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d003      	beq.n	80047c2 <USB_EPClearStall+0x9e>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	791b      	ldrb	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d10f      	bne.n	80047e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004812:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486a:	f023 0302 	bic.w	r3, r3, #2
 800486e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0c1b      	lsrs	r3, r3, #16
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	b29b      	uxth	r3, r3
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800497c:	68bb      	ldr	r3, [r7, #8]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049d8:	68bb      	ldr	r3, [r7, #8]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	460b      	mov	r3, r1
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	333c      	adds	r3, #60	; 0x3c
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <USB_EP0_OutStart+0xb8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d90a      	bls.n	8004a82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7c:	d101      	bne.n	8004a82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e037      	b.n	8004af2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab0:	f043 0318 	orr.w	r3, r3, #24
 8004ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10f      	bne.n	8004af0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	4f54300a 	.word	0x4f54300a

08004b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <USB_CoreReset+0x64>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e01b      	b.n	8004b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	daf2      	bge.n	8004b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <USB_CoreReset+0x64>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d0f0      	beq.n	8004b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	00030d40 	.word	0x00030d40

08004b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b7c:	f002 fcb4 	bl	80074e8 <USBD_static_malloc>
 8004b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	32b0      	adds	r2, #176	; 0xb0
 8004b92:	2100      	movs	r1, #0
 8004b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e0d4      	b.n	8004d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f002 fd1e 	bl	80075e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	32b0      	adds	r2, #176	; 0xb0
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	32b0      	adds	r2, #176	; 0xb0
 8004bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7c1b      	ldrb	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d138      	bne.n	8004c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bd4:	4b5e      	ldr	r3, [pc, #376]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004bd6:	7819      	ldrb	r1, [r3, #0]
 8004bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bdc:	2202      	movs	r2, #2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f002 fb5f 	bl	80072a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004be4:	4b5a      	ldr	r3, [pc, #360]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3324      	adds	r3, #36	; 0x24
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bfe:	4b55      	ldr	r3, [pc, #340]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c00:	7819      	ldrb	r1, [r3, #0]
 8004c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c06:	2202      	movs	r2, #2
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f002 fb4a 	bl	80072a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c0e:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c26:	2201      	movs	r2, #1
 8004c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3326      	adds	r3, #38	; 0x26
 8004c40:	2210      	movs	r2, #16
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e035      	b.n	8004cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c46:	4b42      	ldr	r3, [pc, #264]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004c48:	7819      	ldrb	r1, [r3, #0]
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 fb27 	bl	80072a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <USBD_CDC_Init+0x1e4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c70:	7819      	ldrb	r1, [r3, #0]
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	2202      	movs	r2, #2
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 fb13 	bl	80072a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c94:	2201      	movs	r2, #1
 8004c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c98:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 020f 	and.w	r2, r3, #15
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3326      	adds	r3, #38	; 0x26
 8004cae:	2210      	movs	r2, #16
 8004cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004cb4:	7819      	ldrb	r1, [r3, #0]
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	2203      	movs	r2, #3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f002 faf1 	bl	80072a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <USBD_CDC_Init+0x1ec>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	33b0      	adds	r3, #176	; 0xb0
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e018      	b.n	8004d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7c1b      	ldrb	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004d1e:	7819      	ldrb	r1, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 fba8 	bl	8007480 <USBD_LL_PrepareReceive>
 8004d30:	e008      	b.n	8004d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <USBD_CDC_Init+0x1e8>)
 8004d34:	7819      	ldrb	r1, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d3c:	2340      	movs	r3, #64	; 0x40
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 fb9e 	bl	8007480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200000d3 	.word	0x200000d3
 8004d54:	200000d4 	.word	0x200000d4
 8004d58:	200000d5 	.word	0x200000d5

08004d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <USBD_CDC_DeInit+0xf8>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fabd 	bl	80072ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <USBD_CDC_DeInit+0xf8>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3324      	adds	r3, #36	; 0x24
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <USBD_CDC_DeInit+0xfc>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f002 faaa 	bl	80072ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <USBD_CDC_DeInit+0xfc>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004db2:	2200      	movs	r2, #0
 8004db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f002 fa96 	bl	80072ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	2200      	movs	r2, #0
 8004dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <USBD_CDC_DeInit+0x100>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3326      	adds	r3, #38	; 0x26
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	32b0      	adds	r2, #176	; 0xb0
 8004e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	33b0      	adds	r3, #176	; 0xb0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	; 0xb0
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 fb6a 	bl	8007504 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	; 0xb0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200000d3 	.word	0x200000d3
 8004e58:	200000d4 	.word	0x200000d4
 8004e5c:	200000d5 	.word	0x200000d5

08004e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	32b0      	adds	r2, #176	; 0xb0
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0bf      	b.n	8005010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d050      	beq.n	8004f3e <USBD_CDC_Setup+0xde>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 80af 	bne.w	8005000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03a      	beq.n	8004f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b25b      	sxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da1b      	bge.n	8004eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	33b0      	adds	r3, #176	; 0xb0
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	88d2      	ldrh	r2, [r2, #6]
 8004ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	88db      	ldrh	r3, [r3, #6]
 8004ed6:	2b07      	cmp	r3, #7
 8004ed8:	bf28      	it	cs
 8004eda:	2307      	movcs	r3, #7
 8004edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	89fa      	ldrh	r2, [r7, #14]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fd89 	bl	80069fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004eea:	e090      	b.n	800500e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785a      	ldrb	r2, [r3, #1]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	2b3f      	cmp	r3, #63	; 0x3f
 8004efc:	d803      	bhi.n	8004f06 <USBD_CDC_Setup+0xa6>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	88db      	ldrh	r3, [r3, #6]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	e000      	b.n	8004f08 <USBD_CDC_Setup+0xa8>
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f16:	461a      	mov	r2, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fd9b 	bl	8006a54 <USBD_CtlPrepareRx>
      break;
 8004f1e:	e076      	b.n	800500e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	33b0      	adds	r3, #176	; 0xb0
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	7850      	ldrb	r0, [r2, #1]
 8004f36:	2200      	movs	r2, #0
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4798      	blx	r3
      break;
 8004f3c:	e067      	b.n	800500e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b0b      	cmp	r3, #11
 8004f44:	d851      	bhi.n	8004fea <USBD_CDC_Setup+0x18a>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <USBD_CDC_Setup+0xec>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004ff9 	.word	0x08004ff9
 8004f54:	08004feb 	.word	0x08004feb
 8004f58:	08004feb 	.word	0x08004feb
 8004f5c:	08004feb 	.word	0x08004feb
 8004f60:	08004feb 	.word	0x08004feb
 8004f64:	08004feb 	.word	0x08004feb
 8004f68:	08004feb 	.word	0x08004feb
 8004f6c:	08004feb 	.word	0x08004feb
 8004f70:	08004feb 	.word	0x08004feb
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fd1 	.word	0x08004fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d107      	bne.n	8004f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f88:	f107 030a 	add.w	r3, r7, #10
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fd33 	bl	80069fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f96:	e032      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fcbd 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa4:	e02b      	b.n	8004ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fb2:	f107 030d 	add.w	r3, r7, #13
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fd1e 	bl	80069fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc0:	e01d      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fca8 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8004fce:	e016      	b.n	8004ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d00f      	beq.n	8004ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fc9b 	bl	800691a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fe8:	e008      	b.n	8004ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 fc94 	bl	800691a <USBD_CtlError>
          ret = USBD_FAIL;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ff6:	e002      	b.n	8004ffe <USBD_CDC_Setup+0x19e>
          break;
 8004ff8:	bf00      	nop
 8004ffa:	e008      	b.n	800500e <USBD_CDC_Setup+0x1ae>
          break;
 8004ffc:	bf00      	nop
      }
      break;
 8004ffe:	e006      	b.n	800500e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fc89 	bl	800691a <USBD_CtlError>
      ret = USBD_FAIL;
 8005008:	2303      	movs	r3, #3
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  return (uint8_t)ret;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800502a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800503e:	2303      	movs	r3, #3
 8005040:	e065      	b.n	800510e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	32b0      	adds	r2, #176	; 0xb0
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3318      	adds	r3, #24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02f      	beq.n	80050cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3318      	adds	r3, #24
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 010f 	and.w	r1, r3, #15
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	460b      	mov	r3, r1
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3348      	adds	r3, #72	; 0x48
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fbb2 f1f3 	udiv	r1, r2, r3
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3318      	adds	r3, #24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050be:	78f9      	ldrb	r1, [r7, #3]
 80050c0:	2300      	movs	r3, #0
 80050c2:	2200      	movs	r2, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f002 f9ba 	bl	800743e <USBD_LL_Transmit>
 80050ca:	e01f      	b.n	800510c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	33b0      	adds	r3, #176	; 0xb0
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	33b0      	adds	r3, #176	; 0xb0
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	32b0      	adds	r2, #176	; 0xb0
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	32b0      	adds	r2, #176	; 0xb0
 800513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005144:	2303      	movs	r3, #3
 8005146:	e01a      	b.n	800517e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9b8 	bl	80074c2 <USBD_LL_GetRxDataSize>
 8005152:	4602      	mov	r2, r0
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	33b0      	adds	r3, #176	; 0xb0
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005178:	4611      	mov	r1, r2
 800517a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	32b0      	adds	r2, #176	; 0xb0
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e025      	b.n	80051f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	33b0      	adds	r3, #176	; 0xb0
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <USBD_CDC_EP0_RxReady+0x6c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051c2:	2bff      	cmp	r3, #255	; 0xff
 80051c4:	d015      	beq.n	80051f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	33b0      	adds	r3, #176	; 0xb0
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80051de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051e6:	b292      	uxth	r2, r2
 80051e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005204:	2182      	movs	r1, #130	; 0x82
 8005206:	4818      	ldr	r0, [pc, #96]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005208:	f000 fd4f 	bl	8005caa <USBD_GetEpDesc>
 800520c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800520e:	2101      	movs	r1, #1
 8005210:	4815      	ldr	r0, [pc, #84]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005212:	f000 fd4a 	bl	8005caa <USBD_GetEpDesc>
 8005216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005218:	2181      	movs	r1, #129	; 0x81
 800521a:	4813      	ldr	r0, [pc, #76]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800521c:	f000 fd45 	bl	8005caa <USBD_GetEpDesc>
 8005220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2210      	movs	r2, #16
 800522c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2200      	movs	r2, #0
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	711a      	strb	r2, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005250:	711a      	strb	r2, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2243      	movs	r2, #67	; 0x43
 800525a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000090 	.word	0x20000090

0800526c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005274:	2182      	movs	r1, #130	; 0x82
 8005276:	4818      	ldr	r0, [pc, #96]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005278:	f000 fd17 	bl	8005caa <USBD_GetEpDesc>
 800527c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800527e:	2101      	movs	r1, #1
 8005280:	4815      	ldr	r0, [pc, #84]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005282:	f000 fd12 	bl	8005caa <USBD_GetEpDesc>
 8005286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005288:	2181      	movs	r1, #129	; 0x81
 800528a:	4813      	ldr	r0, [pc, #76]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800528c:	f000 fd0d 	bl	8005caa <USBD_GetEpDesc>
 8005290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2210      	movs	r2, #16
 800529c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2200      	movs	r2, #0
 80052a8:	711a      	strb	r2, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f042 0202 	orr.w	r2, r2, #2
 80052b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	711a      	strb	r2, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f042 0202 	orr.w	r2, r2, #2
 80052c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2243      	movs	r2, #67	; 0x43
 80052ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000090 	.word	0x20000090

080052dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052e4:	2182      	movs	r1, #130	; 0x82
 80052e6:	4818      	ldr	r0, [pc, #96]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052e8:	f000 fcdf 	bl	8005caa <USBD_GetEpDesc>
 80052ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ee:	2101      	movs	r1, #1
 80052f0:	4815      	ldr	r0, [pc, #84]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052f2:	f000 fcda 	bl	8005caa <USBD_GetEpDesc>
 80052f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f8:	2181      	movs	r1, #129	; 0x81
 80052fa:	4813      	ldr	r0, [pc, #76]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052fc:	f000 fcd5 	bl	8005caa <USBD_GetEpDesc>
 8005300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2210      	movs	r2, #16
 800530c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	711a      	strb	r2, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005330:	711a      	strb	r2, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2243      	movs	r2, #67	; 0x43
 800533a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000090 	.word	0x20000090

0800534c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	220a      	movs	r2, #10
 8005358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	2000004c 	.word	0x2000004c

0800536c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800537c:	2303      	movs	r3, #3
 800537e:	e009      	b.n	8005394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	33b0      	adds	r3, #176	; 0xb0
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	32b0      	adds	r2, #176	; 0xb0
 80053b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e008      	b.n	80053d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	32b0      	adds	r2, #176	; 0xb0
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	e004      	b.n	8005412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32b0      	adds	r2, #176	; 0xb0
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32b0      	adds	r2, #176	; 0xb0
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800544e:	2303      	movs	r3, #3
 8005450:	e025      	b.n	800549e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11f      	bne.n	800549c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2201      	movs	r2, #1
 8005460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <USBD_CDC_TransmitPacket+0x88>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4403      	add	r3, r0
 800547e:	3318      	adds	r3, #24
 8005480:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <USBD_CDC_TransmitPacket+0x88>)
 8005484:	7819      	ldrb	r1, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 ffd3 	bl	800743e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200000d3 	.word	0x200000d3

080054ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	32b0      	adds	r2, #176	; 0xb0
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	; 0xb0
 80054ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e018      	b.n	800550c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7c1b      	ldrb	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <USBD_CDC_ReceivePacket+0x68>)
 80054e4:	7819      	ldrb	r1, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 ffc5 	bl	8007480 <USBD_LL_PrepareReceive>
 80054f6:	e008      	b.n	800550a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <USBD_CDC_ReceivePacket+0x68>)
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 ffbb 	bl	8007480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200000d4 	.word	0x200000d4

08005518 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800552c:	2303      	movs	r3, #3
 800552e:	e01f      	b.n	8005570 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	79fa      	ldrb	r2, [r7, #7]
 8005562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f001 fe35 	bl	80071d4 <USBD_LL_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800558c:	2303      	movs	r3, #3
 800558e:	e025      	b.n	80055dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32ae      	adds	r2, #174	; 0xae
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f107 020e 	add.w	r2, r7, #14
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fe3d 	bl	800726c <USBD_LL_Start>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005604:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	4611      	mov	r1, r2
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	4611      	mov	r1, r2
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f908 	bl	80068a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d01a      	beq.n	80056f0 <USBD_LL_SetupStage+0x72>
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d822      	bhi.n	8005704 <USBD_LL_SetupStage+0x86>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <USBD_LL_SetupStage+0x4a>
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d00a      	beq.n	80056dc <USBD_LL_SetupStage+0x5e>
 80056c6:	e01d      	b.n	8005704 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb5f 	bl	8005d94 <USBD_StdDevReq>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e020      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbc7 	bl	8005e78 <USBD_StdItfReq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e016      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fc29 	bl	8005f50 <USBD_StdEPReq>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e00c      	b.n	800571e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800570a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fe0a 	bl	800732c <USBD_LL_StallEP>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	bf00      	nop
  }

  return ret;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	460b      	mov	r3, r1
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d16e      	bne.n	800581e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800574e:	2b03      	cmp	r3, #3
 8005750:	f040 8098 	bne.w	8005884 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	429a      	cmp	r2, r3
 800575e:	d913      	bls.n	8005788 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4293      	cmp	r3, r2
 8005778:	bf28      	it	cs
 800577a:	4613      	movcs	r3, r2
 800577c:	461a      	mov	r2, r3
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f001 f984 	bl	8006a8e <USBD_CtlContinueRx>
 8005786:	e07d      	b.n	8005884 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2b02      	cmp	r3, #2
 8005794:	d014      	beq.n	80057c0 <USBD_LL_DataOutStage+0x98>
 8005796:	2b02      	cmp	r3, #2
 8005798:	d81d      	bhi.n	80057d6 <USBD_LL_DataOutStage+0xae>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <USBD_LL_DataOutStage+0x7c>
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d003      	beq.n	80057aa <USBD_LL_DataOutStage+0x82>
 80057a2:	e018      	b.n	80057d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75bb      	strb	r3, [r7, #22]
            break;
 80057a8:	e018      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fa5e 	bl	8005c76 <USBD_CoreFindIF>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75bb      	strb	r3, [r7, #22]
            break;
 80057be:	e00d      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fa60 	bl	8005c90 <USBD_CoreFindEP>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75bb      	strb	r3, [r7, #22]
            break;
 80057d4:	e002      	b.n	80057dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75bb      	strb	r3, [r7, #22]
            break;
 80057da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057dc:	7dbb      	ldrb	r3, [r7, #22]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d119      	bne.n	8005816 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d113      	bne.n	8005816 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057ee:	7dba      	ldrb	r2, [r7, #22]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	32ae      	adds	r2, #174	; 0xae
 80057f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057fe:	7dba      	ldrb	r2, [r7, #22]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005806:	7dba      	ldrb	r2, [r7, #22]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	32ae      	adds	r2, #174	; 0xae
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 f94a 	bl	8006ab0 <USBD_CtlSendStatus>
 800581c:	e032      	b.n	8005884 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	b2db      	uxtb	r3, r3
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fa31 	bl	8005c90 <USBD_CoreFindEP>
 800582e:	4603      	mov	r3, r0
 8005830:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005832:	7dbb      	ldrb	r3, [r7, #22]
 8005834:	2bff      	cmp	r3, #255	; 0xff
 8005836:	d025      	beq.n	8005884 <USBD_LL_DataOutStage+0x15c>
 8005838:	7dbb      	ldrb	r3, [r7, #22]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d122      	bne.n	8005884 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d117      	bne.n	800587a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800584a:	7dba      	ldrb	r2, [r7, #22]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	32ae      	adds	r2, #174	; 0xae
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00f      	beq.n	800587a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800585a:	7dba      	ldrb	r2, [r7, #22]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005862:	7dba      	ldrb	r2, [r7, #22]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	32ae      	adds	r2, #174	; 0xae
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	7afa      	ldrb	r2, [r7, #11]
 8005870:	4611      	mov	r1, r2
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	4798      	blx	r3
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	e000      	b.n	8005886 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	460b      	mov	r3, r1
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800589c:	7afb      	ldrb	r3, [r7, #11]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d16f      	bne.n	8005982 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3314      	adds	r3, #20
 80058a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d15a      	bne.n	8005968 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d914      	bls.n	80058e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f001 f8ac 	bl	8006a32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f001 fdcd 	bl	8007480 <USBD_LL_PrepareReceive>
 80058e6:	e03f      	b.n	8005968 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d11c      	bne.n	800592e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d316      	bcc.n	800592e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800590a:	429a      	cmp	r2, r3
 800590c:	d20f      	bcs.n	800592e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800590e:	2200      	movs	r2, #0
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 f88d 	bl	8006a32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005920:	2300      	movs	r3, #0
 8005922:	2200      	movs	r2, #0
 8005924:	2100      	movs	r1, #0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f001 fdaa 	bl	8007480 <USBD_LL_PrepareReceive>
 800592c:	e01c      	b.n	8005968 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b03      	cmp	r3, #3
 8005938:	d10f      	bne.n	800595a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f001 fce5 	bl	800732c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 f8b7 	bl	8006ad6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03a      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fe42 	bl	80055fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005980:	e032      	b.n	80059e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005988:	b2db      	uxtb	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f97f 	bl	8005c90 <USBD_CoreFindEP>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2bff      	cmp	r3, #255	; 0xff
 800599a:	d025      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d122      	bne.n	80059e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d11c      	bne.n	80059e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059ae:	7dfa      	ldrb	r2, [r7, #23]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	32ae      	adds	r2, #174	; 0xae
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d014      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059be:	7dfa      	ldrb	r2, [r7, #23]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059c6:	7dfa      	ldrb	r2, [r7, #23]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	32ae      	adds	r2, #174	; 0xae
 80059cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	7afa      	ldrb	r2, [r7, #11]
 80059d4:	4611      	mov	r1, r2
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	4798      	blx	r3
 80059da:	4603      	mov	r3, r0
 80059dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059de:	7dbb      	ldrb	r3, [r7, #22]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059e4:	7dbb      	ldrb	r3, [r7, #22]
 80059e6:	e000      	b.n	80059ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d014      	beq.n	8005a58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fc1f 	bl	80072a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a74:	2340      	movs	r3, #64	; 0x40
 8005a76:	2200      	movs	r2, #0
 8005a78:	2180      	movs	r1, #128	; 0x80
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fc11 	bl	80072a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2240      	movs	r2, #64	; 0x40
 8005a8a:	621a      	str	r2, [r3, #32]

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d106      	bne.n	8005b04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d110      	bne.n	8005b48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	32ae      	adds	r2, #174	; 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e01c      	b.n	8005bae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d115      	bne.n	8005bac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32ae      	adds	r2, #174	; 0xae
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32ae      	adds	r2, #174	; 0xae
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	32ae      	adds	r2, #174	; 0xae
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e01c      	b.n	8005c12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d115      	bne.n	8005c10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32ae      	adds	r2, #174	; 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6852      	ldr	r2, [r2, #4]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d920      	bls.n	8005d14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005cda:	e013      	b.n	8005d04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005cdc:	f107 030a 	add.w	r3, r7, #10
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f000 f81b 	bl	8005d1e <USBD_GetNextDesc>
 8005ce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d108      	bne.n	8005d04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	789b      	ldrb	r3, [r3, #2]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d008      	beq.n	8005d12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	885b      	ldrh	r3, [r3, #2]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d8e5      	bhi.n	8005cdc <USBD_GetEpDesc+0x32>
 8005d10:	e000      	b.n	8005d14 <USBD_GetEpDesc+0x6a>
          break;
 8005d12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d14:	693b      	ldr	r3, [r7, #16]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d76:	8a3b      	ldrh	r3, [r7, #16]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	b21a      	sxth	r2, r3
 8005d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d86:	89fb      	ldrh	r3, [r7, #14]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d005      	beq.n	8005dba <USBD_StdDevReq+0x26>
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d857      	bhi.n	8005e62 <USBD_StdDevReq+0xce>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <USBD_StdDevReq+0x42>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d153      	bne.n	8005e62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	32ae      	adds	r2, #174	; 0xae
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e04a      	b.n	8005e6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d83b      	bhi.n	8005e56 <USBD_StdDevReq+0xc2>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <USBD_StdDevReq+0x50>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005e57 	.word	0x08005e57
 8005df0:	08005e43 	.word	0x08005e43
 8005df4:	08005e57 	.word	0x08005e57
 8005df8:	08005e17 	.word	0x08005e17
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e57 	.word	0x08005e57
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e21 	.word	0x08005e21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa3c 	bl	800628c <USBD_GetDescriptor>
          break;
 8005e14:	e024      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fba1 	bl	8006560 <USBD_SetAddress>
          break;
 8005e1e:	e01f      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fbe0 	bl	80065e8 <USBD_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e2c:	e018      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc83 	bl	800673c <USBD_GetConfig>
          break;
 8005e36:	e013      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fcb4 	bl	80067a8 <USBD_GetStatus>
          break;
 8005e40:	e00e      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fce3 	bl	8006810 <USBD_SetFeature>
          break;
 8005e4a:	e009      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fd07 	bl	8006862 <USBD_ClrFeature>
          break;
 8005e54:	e004      	b.n	8005e60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fd5e 	bl	800691a <USBD_CtlError>
          break;
 8005e5e:	bf00      	nop
      }
      break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd58 	bl	800691a <USBD_CtlError>
      break;
 8005e6a:	bf00      	nop
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d005      	beq.n	8005e9e <USBD_StdItfReq+0x26>
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d852      	bhi.n	8005f3c <USBD_StdItfReq+0xc4>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <USBD_StdItfReq+0x26>
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d14e      	bne.n	8005f3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d840      	bhi.n	8005f2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	889b      	ldrh	r3, [r3, #4]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d836      	bhi.n	8005f24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	889b      	ldrh	r3, [r3, #4]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fed9 	bl	8005c76 <USBD_CoreFindIF>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2bff      	cmp	r3, #255	; 0xff
 8005ecc:	d01d      	beq.n	8005f0a <USBD_StdItfReq+0x92>
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11a      	bne.n	8005f0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ed4:	7bba      	ldrb	r2, [r7, #14]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32ae      	adds	r2, #174	; 0xae
 8005eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00f      	beq.n	8005f04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ee4:	7bba      	ldrb	r2, [r7, #14]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005eec:	7bba      	ldrb	r2, [r7, #14]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32ae      	adds	r2, #174	; 0xae
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f02:	e004      	b.n	8005f0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f04:	2303      	movs	r3, #3
 8005f06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f08:	e001      	b.n	8005f0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d110      	bne.n	8005f38 <USBD_StdItfReq+0xc0>
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fdc7 	bl	8006ab0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f22:	e009      	b.n	8005f38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fcf7 	bl	800691a <USBD_CtlError>
          break;
 8005f2c:	e004      	b.n	8005f38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fcf2 	bl	800691a <USBD_CtlError>
          break;
 8005f36:	e000      	b.n	8005f3a <USBD_StdItfReq+0xc2>
          break;
 8005f38:	bf00      	nop
      }
      break;
 8005f3a:	e004      	b.n	8005f46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fceb 	bl	800691a <USBD_CtlError>
      break;
 8005f44:	bf00      	nop
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	889b      	ldrh	r3, [r3, #4]
 8005f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d007      	beq.n	8005f80 <USBD_StdEPReq+0x30>
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	f200 817f 	bhi.w	8006274 <USBD_StdEPReq+0x324>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d02a      	beq.n	8005fd0 <USBD_StdEPReq+0x80>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	f040 817a 	bne.w	8006274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fe83 	bl	8005c90 <USBD_CoreFindEP>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	2bff      	cmp	r3, #255	; 0xff
 8005f92:	f000 8174 	beq.w	800627e <USBD_StdEPReq+0x32e>
 8005f96:	7b7b      	ldrb	r3, [r7, #13]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8170 	bne.w	800627e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f9e:	7b7a      	ldrb	r2, [r7, #13]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fa6:	7b7a      	ldrb	r2, [r7, #13]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	32ae      	adds	r2, #174	; 0xae
 8005fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8163 	beq.w	800627e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fb8:	7b7a      	ldrb	r2, [r7, #13]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32ae      	adds	r2, #174	; 0xae
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fce:	e156      	b.n	800627e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d008      	beq.n	8005fea <USBD_StdEPReq+0x9a>
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	f300 8145 	bgt.w	8006268 <USBD_StdEPReq+0x318>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 809b 	beq.w	800611a <USBD_StdEPReq+0x1ca>
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d03c      	beq.n	8006062 <USBD_StdEPReq+0x112>
 8005fe8:	e13e      	b.n	8006268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d002      	beq.n	8005ffc <USBD_StdEPReq+0xac>
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d016      	beq.n	8006028 <USBD_StdEPReq+0xd8>
 8005ffa:	e02c      	b.n	8006056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <USBD_StdEPReq+0xce>
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d00a      	beq.n	800601e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f98d 	bl	800732c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 f989 	bl	800732c <USBD_LL_StallEP>
 800601a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800601c:	e020      	b.n	8006060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fc7a 	bl	800691a <USBD_CtlError>
              break;
 8006026:	e01b      	b.n	8006060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	885b      	ldrh	r3, [r3, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10e      	bne.n	800604e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <USBD_StdEPReq+0xfe>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d008      	beq.n	800604e <USBD_StdEPReq+0xfe>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	88db      	ldrh	r3, [r3, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f96f 	bl	800732c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fd2e 	bl	8006ab0 <USBD_CtlSendStatus>

              break;
 8006054:	e004      	b.n	8006060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc5e 	bl	800691a <USBD_CtlError>
              break;
 800605e:	bf00      	nop
          }
          break;
 8006060:	e107      	b.n	8006272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d002      	beq.n	8006074 <USBD_StdEPReq+0x124>
 800606e:	2b03      	cmp	r3, #3
 8006070:	d016      	beq.n	80060a0 <USBD_StdEPReq+0x150>
 8006072:	e04b      	b.n	800610c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <USBD_StdEPReq+0x146>
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	d00a      	beq.n	8006096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f951 	bl	800732c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 f94d 	bl	800732c <USBD_LL_StallEP>
 8006092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006094:	e040      	b.n	8006118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc3e 	bl	800691a <USBD_CtlError>
              break;
 800609e:	e03b      	b.n	8006118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d136      	bne.n	8006116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f957 	bl	800736a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fcf7 	bl	8006ab0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fde2 	bl	8005c90 <USBD_CoreFindEP>
 80060cc:	4603      	mov	r3, r0
 80060ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060d0:	7b7b      	ldrb	r3, [r7, #13]
 80060d2:	2bff      	cmp	r3, #255	; 0xff
 80060d4:	d01f      	beq.n	8006116 <USBD_StdEPReq+0x1c6>
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11c      	bne.n	8006116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060dc:	7b7a      	ldrb	r2, [r7, #13]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060e4:	7b7a      	ldrb	r2, [r7, #13]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	32ae      	adds	r2, #174	; 0xae
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d010      	beq.n	8006116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060f4:	7b7a      	ldrb	r2, [r7, #13]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	; 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800610a:	e004      	b.n	8006116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc03 	bl	800691a <USBD_CtlError>
              break;
 8006114:	e000      	b.n	8006118 <USBD_StdEPReq+0x1c8>
              break;
 8006116:	bf00      	nop
          }
          break;
 8006118:	e0ab      	b.n	8006272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0x1dc>
 8006126:	2b03      	cmp	r3, #3
 8006128:	d032      	beq.n	8006190 <USBD_StdEPReq+0x240>
 800612a:	e097      	b.n	800625c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <USBD_StdEPReq+0x1f2>
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d004      	beq.n	8006142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fbed 	bl	800691a <USBD_CtlError>
                break;
 8006140:	e091      	b.n	8006266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0b      	bge.n	8006162 <USBD_StdEPReq+0x212>
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3310      	adds	r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	e00b      	b.n	800617a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2202      	movs	r2, #2
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc37 	bl	80069fc <USBD_CtlSendData>
              break;
 800618e:	e06a      	b.n	8006266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da11      	bge.n	80061bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d117      	bne.n	80061e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fbb0 	bl	800691a <USBD_CtlError>
                  break;
 80061ba:	e054      	b.n	8006266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb9d 	bl	800691a <USBD_CtlError>
                  break;
 80061e0:	e041      	b.n	8006266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0b      	bge.n	8006202 <USBD_StdEPReq+0x2b2>
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3310      	adds	r3, #16
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	e00b      	b.n	800621a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <USBD_StdEPReq+0x2d8>
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d103      	bne.n	8006230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e00e      	b.n	800624e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f8b7 	bl	80073a8 <USBD_LL_IsStallEP>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2202      	movs	r2, #2
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fbd1 	bl	80069fc <USBD_CtlSendData>
              break;
 800625a:	e004      	b.n	8006266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fb5b 	bl	800691a <USBD_CtlError>
              break;
 8006264:	bf00      	nop
          }
          break;
 8006266:	e004      	b.n	8006272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb55 	bl	800691a <USBD_CtlError>
          break;
 8006270:	bf00      	nop
      }
      break;
 8006272:	e005      	b.n	8006280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb4f 	bl	800691a <USBD_CtlError>
      break;
 800627c:	e000      	b.n	8006280 <USBD_StdEPReq+0x330>
      break;
 800627e:	bf00      	nop
  }

  return ret;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	885b      	ldrh	r3, [r3, #2]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	f200 8128 	bhi.w	8006502 <USBD_GetDescriptor+0x276>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <USBD_GetDescriptor+0x2c>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	0800632d 	.word	0x0800632d
 80062c4:	08006503 	.word	0x08006503
 80062c8:	08006503 	.word	0x08006503
 80062cc:	080064a3 	.word	0x080064a3
 80062d0:	080064cf 	.word	0x080064cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
      break;
 80062ea:	e112      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f107 0208 	add.w	r2, r7, #8
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800630e:	e100      	b.n	8006512 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	f107 0208 	add.w	r2, r7, #8
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
 8006320:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	2202      	movs	r2, #2
 8006328:	701a      	strb	r2, [r3, #0]
      break;
 800632a:	e0f2      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b05      	cmp	r3, #5
 8006334:	f200 80ac 	bhi.w	8006490 <USBD_GetDescriptor+0x204>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USBD_GetDescriptor+0xb4>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006359 	.word	0x08006359
 8006344:	0800638d 	.word	0x0800638d
 8006348:	080063c1 	.word	0x080063c1
 800634c:	080063f5 	.word	0x080063f5
 8006350:	08006429 	.word	0x08006429
 8006354:	0800645d 	.word	0x0800645d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	7c12      	ldrb	r2, [r2, #16]
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800637a:	e091      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 facb 	bl	800691a <USBD_CtlError>
            err++;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	3301      	adds	r3, #1
 8006388:	72fb      	strb	r3, [r7, #11]
          break;
 800638a:	e089      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7c12      	ldrb	r2, [r2, #16]
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ae:	e077      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fab1 	bl	800691a <USBD_CtlError>
            err++;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	3301      	adds	r3, #1
 80063bc:	72fb      	strb	r3, [r7, #11]
          break;
 80063be:	e06f      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	7c12      	ldrb	r2, [r2, #16]
 80063d8:	f107 0108 	add.w	r1, r7, #8
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e2:	e05d      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa97 	bl	800691a <USBD_CtlError>
            err++;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	3301      	adds	r3, #1
 80063f0:	72fb      	strb	r3, [r7, #11]
          break;
 80063f2:	e055      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	7c12      	ldrb	r2, [r2, #16]
 800640c:	f107 0108 	add.w	r1, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006416:	e043      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa7d 	bl	800691a <USBD_CtlError>
            err++;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	3301      	adds	r3, #1
 8006424:	72fb      	strb	r3, [r7, #11]
          break;
 8006426:	e03b      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	7c12      	ldrb	r2, [r2, #16]
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644a:	e029      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa63 	bl	800691a <USBD_CtlError>
            err++;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	3301      	adds	r3, #1
 8006458:	72fb      	strb	r3, [r7, #11]
          break;
 800645a:	e021      	b.n	80064a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647e:	e00f      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa49 	bl	800691a <USBD_CtlError>
            err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
          break;
 800648e:	e007      	b.n	80064a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa41 	bl	800691a <USBD_CtlError>
          err++;
 8006498:	7afb      	ldrb	r3, [r7, #11]
 800649a:	3301      	adds	r3, #1
 800649c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800649e:	bf00      	nop
      }
      break;
 80064a0:	e037      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c1b      	ldrb	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b2:	f107 0208 	add.w	r2, r7, #8
 80064b6:	4610      	mov	r0, r2
 80064b8:	4798      	blx	r3
 80064ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064bc:	e029      	b.n	8006512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa2a 	bl	800691a <USBD_CtlError>
        err++;
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	3301      	adds	r3, #1
 80064ca:	72fb      	strb	r3, [r7, #11]
      break;
 80064cc:	e021      	b.n	8006512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7c1b      	ldrb	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f107 0208 	add.w	r2, r7, #8
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
 80064e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	2207      	movs	r2, #7
 80064ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f0:	e00f      	b.n	8006512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa10 	bl	800691a <USBD_CtlError>
        err++;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	3301      	adds	r3, #1
 80064fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006500:	e007      	b.n	8006512 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa08 	bl	800691a <USBD_CtlError>
      err++;
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	3301      	adds	r3, #1
 800650e:	72fb      	strb	r3, [r7, #11]
      break;
 8006510:	bf00      	nop
  }

  if (err != 0U)
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d11e      	bne.n	8006556 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	88db      	ldrh	r3, [r3, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d016      	beq.n	800654e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	88da      	ldrh	r2, [r3, #6]
 800652a:	893b      	ldrh	r3, [r7, #8]
 800652c:	4293      	cmp	r3, r2
 800652e:	bf28      	it	cs
 8006530:	4613      	movcs	r3, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006536:	893b      	ldrh	r3, [r7, #8]
 8006538:	461a      	mov	r2, r3
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fa5d 	bl	80069fc <USBD_CtlSendData>
 8006542:	e009      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9e7 	bl	800691a <USBD_CtlError>
 800654c:	e004      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 faae 	bl	8006ab0 <USBD_CtlSendStatus>
 8006554:	e000      	b.n	8006558 <USBD_GetDescriptor+0x2cc>
    return;
 8006556:	bf00      	nop
  }
}
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop

08006560 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	889b      	ldrh	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d131      	bne.n	80065d6 <USBD_SetAddress+0x76>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	88db      	ldrh	r3, [r3, #6]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12d      	bne.n	80065d6 <USBD_SetAddress+0x76>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	885b      	ldrh	r3, [r3, #2]
 800657e:	2b7f      	cmp	r3, #127	; 0x7f
 8006580:	d829      	bhi.n	80065d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b03      	cmp	r3, #3
 8006598:	d104      	bne.n	80065a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9bc 	bl	800691a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	e01d      	b.n	80065e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7bfa      	ldrb	r2, [r7, #15]
 80065a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ff25 	bl	8007400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa7a 	bl	8006ab0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	e009      	b.n	80065e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	e004      	b.n	80065e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f99e 	bl	800691a <USBD_CtlError>
  }
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b4e      	ldr	r3, [pc, #312]	; (8006738 <USBD_SetConfig+0x150>)
 80065fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006600:	4b4d      	ldr	r3, [pc, #308]	; (8006738 <USBD_SetConfig+0x150>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d905      	bls.n	8006614 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f985 	bl	800691a <USBD_CtlError>
    return USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e08c      	b.n	800672e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d002      	beq.n	8006626 <USBD_SetConfig+0x3e>
 8006620:	2b03      	cmp	r3, #3
 8006622:	d029      	beq.n	8006678 <USBD_SetConfig+0x90>
 8006624:	e075      	b.n	8006712 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006626:	4b44      	ldr	r3, [pc, #272]	; (8006738 <USBD_SetConfig+0x150>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800662e:	4b42      	ldr	r3, [pc, #264]	; (8006738 <USBD_SetConfig+0x150>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006638:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <USBD_SetConfig+0x150>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fe ffe7 	bl	8005612 <USBD_SetClassConfig>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f962 	bl	800691a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800665e:	e065      	b.n	800672c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa25 	bl	8006ab0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800666e:	e05d      	b.n	800672c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa1d 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006676:	e059      	b.n	800672c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006678:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <USBD_SetConfig+0x150>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <USBD_SetConfig+0x150>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <USBD_SetConfig+0x150>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fe ffd6 	bl	800564a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa06 	bl	8006ab0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066a4:	e042      	b.n	800672c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <USBD_SetConfig+0x150>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d02a      	beq.n	800670a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe ffc4 	bl	800564a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <USBD_SetConfig+0x150>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <USBD_SetConfig+0x150>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fe ff9d 	bl	8005612 <USBD_SetClassConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00f      	beq.n	8006702 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f918 	bl	800691a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe ffa9 	bl	800564a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006700:	e014      	b.n	800672c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9d4 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006708:	e010      	b.n	800672c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9d0 	bl	8006ab0 <USBD_CtlSendStatus>
      break;
 8006710:	e00c      	b.n	800672c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f900 	bl	800691a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <USBD_SetConfig+0x150>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe ff92 	bl	800564a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000298 	.word	0x20000298

0800673c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	88db      	ldrh	r3, [r3, #6]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d004      	beq.n	8006758 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8e2 	bl	800691a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006756:	e023      	b.n	80067a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	dc02      	bgt.n	800676a <USBD_GetConfig+0x2e>
 8006764:	2b00      	cmp	r3, #0
 8006766:	dc03      	bgt.n	8006770 <USBD_GetConfig+0x34>
 8006768:	e015      	b.n	8006796 <USBD_GetConfig+0x5a>
 800676a:	2b03      	cmp	r3, #3
 800676c:	d00b      	beq.n	8006786 <USBD_GetConfig+0x4a>
 800676e:	e012      	b.n	8006796 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3308      	adds	r3, #8
 800677a:	2201      	movs	r2, #1
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f93c 	bl	80069fc <USBD_CtlSendData>
        break;
 8006784:	e00c      	b.n	80067a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	2201      	movs	r2, #1
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f934 	bl	80069fc <USBD_CtlSendData>
        break;
 8006794:	e004      	b.n	80067a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f8be 	bl	800691a <USBD_CtlError>
        break;
 800679e:	bf00      	nop
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d81e      	bhi.n	80067fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	88db      	ldrh	r3, [r3, #6]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d004      	beq.n	80067d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8a5 	bl	800691a <USBD_CtlError>
        break;
 80067d0:	e01a      	b.n	8006808 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f043 0202 	orr.w	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	330c      	adds	r3, #12
 80067f2:	2202      	movs	r2, #2
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f900 	bl	80069fc <USBD_CtlSendData>
      break;
 80067fc:	e004      	b.n	8006808 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f88a 	bl	800691a <USBD_CtlError>
      break;
 8006806:	bf00      	nop
  }
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	885b      	ldrh	r3, [r3, #2]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d107      	bne.n	8006832 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f940 	bl	8006ab0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006830:	e013      	b.n	800685a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d10b      	bne.n	8006852 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	889b      	ldrh	r3, [r3, #4]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f930 	bl	8006ab0 <USBD_CtlSendStatus>
}
 8006850:	e003      	b.n	800685a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f860 	bl	800691a <USBD_CtlError>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	2b02      	cmp	r3, #2
 8006878:	d80b      	bhi.n	8006892 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10c      	bne.n	800689c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f910 	bl	8006ab0 <USBD_CtlSendStatus>
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f840 	bl	800691a <USBD_CtlError>
      break;
 800689a:	e000      	b.n	800689e <USBD_ClrFeature+0x3c>
      break;
 800689c:	bf00      	nop
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fa41 	bl	8005d58 <SWAPBYTE>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fa34 	bl	8005d58 <SWAPBYTE>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fa27 	bl	8005d58 <SWAPBYTE>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	80da      	strh	r2, [r3, #6]
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fd00 	bl	800732c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800692c:	2100      	movs	r1, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fcfc 	bl	800732c <USBD_LL_StallEP>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d036      	beq.n	80069c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006956:	6938      	ldr	r0, [r7, #16]
 8006958:	f000 f836 	bl	80069c8 <USBD_GetLen>
 800695c:	4603      	mov	r3, r0
 800695e:	3301      	adds	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	701a      	strb	r2, [r3, #0]
  idx++;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	2203      	movs	r2, #3
 8006984:	701a      	strb	r2, [r3, #0]
  idx++;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	3301      	adds	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800698c:	e013      	b.n	80069b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3301      	adds	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
    idx++;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	3301      	adds	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4413      	add	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	3301      	adds	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e7      	bne.n	800698e <USBD_GetString+0x52>
 80069be:	e000      	b.n	80069c2 <USBD_GetString+0x86>
    return;
 80069c0:	bf00      	nop
  }
}
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069d8:	e005      	b.n	80069e6 <USBD_GetLen+0x1e>
  {
    len++;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	3301      	adds	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f5      	bne.n	80069da <USBD_GetLen+0x12>
  }

  return len;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fd0b 	bl	800743e <USBD_LL_Transmit>

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	2100      	movs	r1, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fcfa 	bl	800743e <USBD_LL_Transmit>

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2203      	movs	r2, #3
 8006a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fcfe 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fced 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fcb9 	bl	800743e <USBD_LL_Transmit>

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2100      	movs	r1, #0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcc7 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4912      	ldr	r1, [pc, #72]	; (8006b4c <MX_USB_DEVICE_Init+0x50>)
 8006b04:	4812      	ldr	r0, [pc, #72]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b06:	f7fe fd07 	bl	8005518 <USBD_Init>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b10:	f7fa f818 	bl	8000b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b14:	490f      	ldr	r1, [pc, #60]	; (8006b54 <MX_USB_DEVICE_Init+0x58>)
 8006b16:	480e      	ldr	r0, [pc, #56]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b18:	f7fe fd2e 	bl	8005578 <USBD_RegisterClass>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b22:	f7fa f80f 	bl	8000b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b26:	490c      	ldr	r1, [pc, #48]	; (8006b58 <MX_USB_DEVICE_Init+0x5c>)
 8006b28:	4809      	ldr	r0, [pc, #36]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b2a:	f7fe fc1f 	bl	800536c <USBD_CDC_RegisterInterface>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b34:	f7fa f806 	bl	8000b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b38:	4805      	ldr	r0, [pc, #20]	; (8006b50 <MX_USB_DEVICE_Init+0x54>)
 8006b3a:	f7fe fd53 	bl	80055e4 <USBD_Start>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b44:	f7f9 fffe 	bl	8000b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b48:	bf00      	nop
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	200000ec 	.word	0x200000ec
 8006b50:	2000029c 	.word	0x2000029c
 8006b54:	20000058 	.word	0x20000058
 8006b58:	200000d8 	.word	0x200000d8

08006b5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	4905      	ldr	r1, [pc, #20]	; (8006b78 <CDC_Init_FS+0x1c>)
 8006b64:	4805      	ldr	r0, [pc, #20]	; (8006b7c <CDC_Init_FS+0x20>)
 8006b66:	f7fe fc1b 	bl	80053a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b6a:	4905      	ldr	r1, [pc, #20]	; (8006b80 <CDC_Init_FS+0x24>)
 8006b6c:	4803      	ldr	r0, [pc, #12]	; (8006b7c <CDC_Init_FS+0x20>)
 8006b6e:	f7fe fc39 	bl	80053e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000d78 	.word	0x20000d78
 8006b7c:	2000029c 	.word	0x2000029c
 8006b80:	20000578 	.word	0x20000578

08006b84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	6039      	str	r1, [r7, #0]
 8006b9e:	71fb      	strb	r3, [r7, #7]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b23      	cmp	r3, #35	; 0x23
 8006ba8:	d84a      	bhi.n	8006c40 <CDC_Control_FS+0xac>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <CDC_Control_FS+0x1c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c41 	.word	0x08006c41
 8006bb4:	08006c41 	.word	0x08006c41
 8006bb8:	08006c41 	.word	0x08006c41
 8006bbc:	08006c41 	.word	0x08006c41
 8006bc0:	08006c41 	.word	0x08006c41
 8006bc4:	08006c41 	.word	0x08006c41
 8006bc8:	08006c41 	.word	0x08006c41
 8006bcc:	08006c41 	.word	0x08006c41
 8006bd0:	08006c41 	.word	0x08006c41
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c41 	.word	0x08006c41
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	08006c41 	.word	0x08006c41
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c41 	.word	0x08006c41
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c41 	.word	0x08006c41
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c41 	.word	0x08006c41
 8006c38:	08006c41 	.word	0x08006c41
 8006c3c:	08006c41 	.word	0x08006c41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c40:	bf00      	nop
  }

  return (USBD_OK);
 8006c42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4812      	ldr	r0, [pc, #72]	; (8006ca8 <CDC_Receive_FS+0x58>)
 8006c5e:	f7fe fbc1 	bl	80053e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c62:	4811      	ldr	r0, [pc, #68]	; (8006ca8 <CDC_Receive_FS+0x58>)
 8006c64:	f7fe fc22 	bl	80054ac <USBD_CDC_ReceivePacket>

  sprintf(&rx_data, "%s", (char*) &Buf[0]);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4910      	ldr	r1, [pc, #64]	; (8006cac <CDC_Receive_FS+0x5c>)
 8006c6c:	4810      	ldr	r0, [pc, #64]	; (8006cb0 <CDC_Receive_FS+0x60>)
 8006c6e:	f000 fdb1 	bl	80077d4 <siprintf>
  if (rx_data == '\b' || rx_data == '\x7f')
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <CDC_Receive_FS+0x60>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d003      	beq.n	8006c82 <CDC_Receive_FS+0x32>
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <CDC_Receive_FS+0x60>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c80:	d108      	bne.n	8006c94 <CDC_Receive_FS+0x44>
  {
    /* only echo "Backspace" if num_char is larger than 0 */
    if (char_count > 0)
 8006c82:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <CDC_Receive_FS+0x64>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <CDC_Receive_FS+0x4c>
    	CDC_Transmit_FS((uint8_t*) &rx_data, 1);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4808      	ldr	r0, [pc, #32]	; (8006cb0 <CDC_Receive_FS+0x60>)
 8006c8e:	f000 f813 	bl	8006cb8 <CDC_Transmit_FS>
    if (char_count > 0)
 8006c92:	e003      	b.n	8006c9c <CDC_Receive_FS+0x4c>
  }
  else
  {
	  CDC_Transmit_FS((uint8_t*) &rx_data, 1);
 8006c94:	2101      	movs	r1, #1
 8006c96:	4806      	ldr	r0, [pc, #24]	; (8006cb0 <CDC_Receive_FS+0x60>)
 8006c98:	f000 f80e 	bl	8006cb8 <CDC_Transmit_FS>
  }
  return (USBD_OK);
 8006c9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2000029c 	.word	0x2000029c
 8006cac:	08008bac 	.word	0x08008bac
 8006cb0:	20000000 	.word	0x20000000
 8006cb4:	20000228 	.word	0x20000228

08006cb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <CDC_Transmit_FS+0x48>)
 8006cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e00b      	b.n	8006cf6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4806      	ldr	r0, [pc, #24]	; (8006d00 <CDC_Transmit_FS+0x48>)
 8006ce6:	f7fe fb5b 	bl	80053a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006cea:	4805      	ldr	r0, [pc, #20]	; (8006d00 <CDC_Transmit_FS+0x48>)
 8006cec:	f7fe fb98 	bl	8005420 <USBD_CDC_TransmitPacket>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2000029c 	.word	0x2000029c

08006d04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2212      	movs	r2, #18
 8006d38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20000108 	.word	0x20000108

08006d4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	6039      	str	r1, [r7, #0]
 8006d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d5e:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000011c 	.word	0x2000011c

08006d70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	6039      	str	r1, [r7, #0]
 8006d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d105      	bne.n	8006d8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4907      	ldr	r1, [pc, #28]	; (8006da4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d86:	4808      	ldr	r0, [pc, #32]	; (8006da8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d88:	f7ff fdd8 	bl	800693c <USBD_GetString>
 8006d8c:	e004      	b.n	8006d98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4904      	ldr	r1, [pc, #16]	; (8006da4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d92:	4805      	ldr	r0, [pc, #20]	; (8006da8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d94:	f7ff fdd2 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20001578 	.word	0x20001578
 8006da8:	08008bb0 	.word	0x08008bb0

08006dac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	4904      	ldr	r1, [pc, #16]	; (8006dcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dbc:	4804      	ldr	r0, [pc, #16]	; (8006dd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dbe:	f7ff fdbd 	bl	800693c <USBD_GetString>
  return USBD_StrDesc;
 8006dc2:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20001578 	.word	0x20001578
 8006dd0:	08008bc8 	.word	0x08008bc8

08006dd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	221a      	movs	r2, #26
 8006de4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006de6:	f000 f843 	bl	8006e70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dea:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000120 	.word	0x20000120

08006df8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	6039      	str	r1, [r7, #0]
 8006e02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4907      	ldr	r1, [pc, #28]	; (8006e2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e0e:	4808      	ldr	r0, [pc, #32]	; (8006e30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e10:	f7ff fd94 	bl	800693c <USBD_GetString>
 8006e14:	e004      	b.n	8006e20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4904      	ldr	r1, [pc, #16]	; (8006e2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e1a:	4805      	ldr	r0, [pc, #20]	; (8006e30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e1c:	f7ff fd8e 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20001578 	.word	0x20001578
 8006e30:	08008bdc 	.word	0x08008bdc

08006e34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4907      	ldr	r1, [pc, #28]	; (8006e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e4a:	4808      	ldr	r0, [pc, #32]	; (8006e6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e4c:	f7ff fd76 	bl	800693c <USBD_GetString>
 8006e50:	e004      	b.n	8006e5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	4904      	ldr	r1, [pc, #16]	; (8006e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e56:	4805      	ldr	r0, [pc, #20]	; (8006e6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e58:	f7ff fd70 	bl	800693c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20001578 	.word	0x20001578
 8006e6c:	08008be8 	.word	0x08008be8

08006e70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <Get_SerialNum+0x44>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <Get_SerialNum+0x48>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <Get_SerialNum+0x4c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e96:	2208      	movs	r2, #8
 8006e98:	4909      	ldr	r1, [pc, #36]	; (8006ec0 <Get_SerialNum+0x50>)
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f814 	bl	8006ec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	4908      	ldr	r1, [pc, #32]	; (8006ec4 <Get_SerialNum+0x54>)
 8006ea4:	68b8      	ldr	r0, [r7, #8]
 8006ea6:	f000 f80f 	bl	8006ec8 <IntToUnicode>
  }
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	1fff7a10 	.word	0x1fff7a10
 8006eb8:	1fff7a14 	.word	0x1fff7a14
 8006ebc:	1fff7a18 	.word	0x1fff7a18
 8006ec0:	20000122 	.word	0x20000122
 8006ec4:	20000132 	.word	0x20000132

08006ec8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	75fb      	strb	r3, [r7, #23]
 8006ede:	e027      	b.n	8006f30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	0f1b      	lsrs	r3, r3, #28
 8006ee4:	2b09      	cmp	r3, #9
 8006ee6:	d80b      	bhi.n	8006f00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	0f1b      	lsrs	r3, r3, #28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3230      	adds	r2, #48	; 0x30
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e00a      	b.n	8006f16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	0f1b      	lsrs	r3, r3, #28
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	440b      	add	r3, r1
 8006f10:	3237      	adds	r2, #55	; 0x37
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	3301      	adds	r3, #1
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	4413      	add	r3, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
 8006f30:	7dfa      	ldrb	r2, [r7, #23]
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d3d3      	bcc.n	8006ee0 <IntToUnicode+0x18>
  }
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f50:	f107 0314 	add.w	r3, r7, #20
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f68:	d13a      	bne.n	8006fe0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006f74:	f043 0301 	orr.w	r3, r3, #1
 8006f78:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f94:	2303      	movs	r3, #3
 8006f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f98:	230a      	movs	r3, #10
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4812      	ldr	r0, [pc, #72]	; (8006fec <HAL_PCD_MspInit+0xa4>)
 8006fa4:	f7fa f8f4 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	4a0e      	ldr	r2, [pc, #56]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <HAL_PCD_MspInit+0xa0>)
 8006fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2043      	movs	r0, #67	; 0x43
 8006fd6:	f7fa f8a0 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fda:	2043      	movs	r0, #67	; 0x43
 8006fdc:	f7fa f8b9 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	3728      	adds	r7, #40	; 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40020000 	.word	0x40020000

08006ff0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f7fe fb39 	bl	800567e <USBD_LL_SetupStage>
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	4619      	mov	r1, r3
 800703e:	f7fe fb73 	bl	8005728 <USBD_LL_DataOutStage>
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4613      	mov	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	334c      	adds	r3, #76	; 0x4c
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	4619      	mov	r1, r3
 8007072:	f7fe fc0c 	bl	800588e <USBD_LL_DataInStage>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd40 	bl	8005b12 <USBD_LL_SOF>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070a2:	2301      	movs	r3, #1
 80070a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e008      	b.n	80070c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d102      	bne.n	80070c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	e001      	b.n	80070c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070c2:	f7f9 fd3f 	bl	8000b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070cc:	7bfa      	ldrb	r2, [r7, #15]
 80070ce:	4611      	mov	r1, r2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fce0 	bl	8005a96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fc88 	bl	80059f2 <USBD_LL_Reset>
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fcdb 	bl	8005ab6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <HAL_PCD_SuspendCallback+0x48>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	4a03      	ldr	r2, [pc, #12]	; (8007134 <HAL_PCD_SuspendCallback+0x48>)
 8007126:	f043 0306 	orr.w	r3, r3, #6
 800712a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fccb 	bl	8005ae2 <USBD_LL_Resume>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd23 	bl	8005bb6 <USBD_LL_IsoOUTIncomplete>
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fcdf 	bl	8005b52 <USBD_LL_IsoINIncomplete>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fd35 	bl	8005c1a <USBD_LL_DevConnected>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fd32 	bl	8005c30 <USBD_LL_DevDisconnected>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d13c      	bne.n	800725e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071e4:	4a20      	ldr	r2, [pc, #128]	; (8007268 <USBD_LL_Init+0x94>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <USBD_LL_Init+0x94>)
 80071f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <USBD_LL_Init+0x94>)
 80071f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071fc:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <USBD_LL_Init+0x94>)
 80071fe:	2204      	movs	r2, #4
 8007200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <USBD_LL_Init+0x94>)
 8007204:	2202      	movs	r2, #2
 8007206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <USBD_LL_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800720e:	4b16      	ldr	r3, [pc, #88]	; (8007268 <USBD_LL_Init+0x94>)
 8007210:	2202      	movs	r2, #2
 8007212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007214:	4b14      	ldr	r3, [pc, #80]	; (8007268 <USBD_LL_Init+0x94>)
 8007216:	2200      	movs	r2, #0
 8007218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800721a:	4b13      	ldr	r3, [pc, #76]	; (8007268 <USBD_LL_Init+0x94>)
 800721c:	2200      	movs	r2, #0
 800721e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <USBD_LL_Init+0x94>)
 8007222:	2200      	movs	r2, #0
 8007224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <USBD_LL_Init+0x94>)
 8007228:	2200      	movs	r2, #0
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <USBD_LL_Init+0x94>)
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007232:	480d      	ldr	r0, [pc, #52]	; (8007268 <USBD_LL_Init+0x94>)
 8007234:	f7fa f961 	bl	80014fa <HAL_PCD_Init>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800723e:	f7f9 fc81 	bl	8000b44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	4808      	ldr	r0, [pc, #32]	; (8007268 <USBD_LL_Init+0x94>)
 8007246:	f7fb fbb8 	bl	80029ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800724a:	2240      	movs	r2, #64	; 0x40
 800724c:	2100      	movs	r1, #0
 800724e:	4806      	ldr	r0, [pc, #24]	; (8007268 <USBD_LL_Init+0x94>)
 8007250:	f7fb fb6c 	bl	800292c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007254:	2280      	movs	r2, #128	; 0x80
 8007256:	2101      	movs	r1, #1
 8007258:	4803      	ldr	r0, [pc, #12]	; (8007268 <USBD_LL_Init+0x94>)
 800725a:	f7fb fb67 	bl	800292c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20001778 	.word	0x20001778

0800726c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007282:	4618      	mov	r0, r3
 8007284:	f7fa fa56 	bl	8001734 <HAL_PCD_Start>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f942 	bl	8007518 <USBD_Get_USB_Status>
 8007294:	4603      	mov	r3, r0
 8007296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007298:	7bbb      	ldrb	r3, [r7, #14]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	461a      	mov	r2, r3
 80072b0:	4603      	mov	r3, r0
 80072b2:	70fb      	strb	r3, [r7, #3]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70bb      	strb	r3, [r7, #2]
 80072b8:	4613      	mov	r3, r2
 80072ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072ca:	78bb      	ldrb	r3, [r7, #2]
 80072cc:	883a      	ldrh	r2, [r7, #0]
 80072ce:	78f9      	ldrb	r1, [r7, #3]
 80072d0:	f7fa ff27 	bl	8002122 <HAL_PCD_EP_Open>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f91c 	bl	8007518 <USBD_Get_USB_Status>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f7fa ff70 	bl	80021f2 <HAL_PCD_EP_Close>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f8fd 	bl	8007518 <USBD_Get_USB_Status>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007322:	7bbb      	ldrb	r3, [r7, #14]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fb f848 	bl	80023e0 <HAL_PCD_EP_SetStall>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f8de 	bl	8007518 <USBD_Get_USB_Status>
 800735c:	4603      	mov	r3, r0
 800735e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007360:	7bbb      	ldrb	r3, [r7, #14]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	4611      	mov	r1, r2
 8007388:	4618      	mov	r0, r3
 800738a:	f7fb f88d 	bl	80024a8 <HAL_PCD_EP_ClrStall>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f8bf 	bl	8007518 <USBD_Get_USB_Status>
 800739a:	4603      	mov	r3, r0
 800739c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800739e:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	da0b      	bge.n	80073dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	333e      	adds	r3, #62	; 0x3e
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	e00b      	b.n	80073f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e2:	68f9      	ldr	r1, [r7, #12]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80073f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7fa fe5a 	bl	80020d8 <HAL_PCD_SetAddress>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f874 	bl	8007518 <USBD_Get_USB_Status>
 8007430:	4603      	mov	r3, r0
 8007432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007434:	7bbb      	ldrb	r3, [r7, #14]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	460b      	mov	r3, r1
 800744c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800745c:	7af9      	ldrb	r1, [r7, #11]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	f7fa ff73 	bl	800234c <HAL_PCD_EP_Transmit>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f853 	bl	8007518 <USBD_Get_USB_Status>
 8007472:	4603      	mov	r3, r0
 8007474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007476:	7dbb      	ldrb	r3, [r7, #22]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	460b      	mov	r3, r1
 800748e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800749e:	7af9      	ldrb	r1, [r7, #11]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	f7fa feef 	bl	8002286 <HAL_PCD_EP_Receive>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f832 	bl	8007518 <USBD_Get_USB_Status>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fa ff1f 	bl	800231c <HAL_PCD_EP_GetRxCount>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074f0:	4b03      	ldr	r3, [pc, #12]	; (8007500 <USBD_static_malloc+0x18>)
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20001c84 	.word	0x20001c84

08007504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d817      	bhi.n	800755c <USBD_Get_USB_Status+0x44>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USBD_Get_USB_Status+0x1c>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007545 	.word	0x08007545
 8007538:	0800754b 	.word	0x0800754b
 800753c:	08007551 	.word	0x08007551
 8007540:	08007557 	.word	0x08007557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
    break;
 8007548:	e00b      	b.n	8007562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	73fb      	strb	r3, [r7, #15]
    break;
 800754e:	e008      	b.n	8007562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007550:	2301      	movs	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
    break;
 8007554:	e005      	b.n	8007562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	73fb      	strb	r3, [r7, #15]
    break;
 800755a:	e002      	b.n	8007562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
    break;
 8007560:	bf00      	nop
  }
  return usb_status;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <__errno>:
 8007570:	4b01      	ldr	r3, [pc, #4]	; (8007578 <__errno+0x8>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	2000013c 	.word	0x2000013c

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	4d0d      	ldr	r5, [pc, #52]	; (80075b4 <__libc_init_array+0x38>)
 8007580:	4c0d      	ldr	r4, [pc, #52]	; (80075b8 <__libc_init_array+0x3c>)
 8007582:	1b64      	subs	r4, r4, r5
 8007584:	10a4      	asrs	r4, r4, #2
 8007586:	2600      	movs	r6, #0
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	4d0b      	ldr	r5, [pc, #44]	; (80075bc <__libc_init_array+0x40>)
 800758e:	4c0c      	ldr	r4, [pc, #48]	; (80075c0 <__libc_init_array+0x44>)
 8007590:	f001 fa7a 	bl	8008a88 <_init>
 8007594:	1b64      	subs	r4, r4, r5
 8007596:	10a4      	asrs	r4, r4, #2
 8007598:	2600      	movs	r6, #0
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	08008d58 	.word	0x08008d58
 80075b8:	08008d58 	.word	0x08008d58
 80075bc:	08008d58 	.word	0x08008d58
 80075c0:	08008d5c 	.word	0x08008d5c

080075c4 <malloc>:
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <malloc+0xc>)
 80075c6:	4601      	mov	r1, r0
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f000 b87f 	b.w	80076cc <_malloc_r>
 80075ce:	bf00      	nop
 80075d0:	2000013c 	.word	0x2000013c

080075d4 <free>:
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <free+0xc>)
 80075d6:	4601      	mov	r1, r0
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f000 b80b 	b.w	80075f4 <_free_r>
 80075de:	bf00      	nop
 80075e0:	2000013c 	.word	0x2000013c

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <_free_r>:
 80075f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d044      	beq.n	8007684 <_free_r+0x90>
 80075fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fe:	9001      	str	r0, [sp, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f1a1 0404 	sub.w	r4, r1, #4
 8007606:	bfb8      	it	lt
 8007608:	18e4      	addlt	r4, r4, r3
 800760a:	f000 f9af 	bl	800796c <__malloc_lock>
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <_free_r+0x94>)
 8007610:	9801      	ldr	r0, [sp, #4]
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	b933      	cbnz	r3, 8007624 <_free_r+0x30>
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	6014      	str	r4, [r2, #0]
 800761a:	b003      	add	sp, #12
 800761c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007620:	f000 b9aa 	b.w	8007978 <__malloc_unlock>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d908      	bls.n	800763a <_free_r+0x46>
 8007628:	6825      	ldr	r5, [r4, #0]
 800762a:	1961      	adds	r1, r4, r5
 800762c:	428b      	cmp	r3, r1
 800762e:	bf01      	itttt	eq
 8007630:	6819      	ldreq	r1, [r3, #0]
 8007632:	685b      	ldreq	r3, [r3, #4]
 8007634:	1949      	addeq	r1, r1, r5
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	e7ed      	b.n	8007616 <_free_r+0x22>
 800763a:	461a      	mov	r2, r3
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b10b      	cbz	r3, 8007644 <_free_r+0x50>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d9fa      	bls.n	800763a <_free_r+0x46>
 8007644:	6811      	ldr	r1, [r2, #0]
 8007646:	1855      	adds	r5, r2, r1
 8007648:	42a5      	cmp	r5, r4
 800764a:	d10b      	bne.n	8007664 <_free_r+0x70>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	4421      	add	r1, r4
 8007650:	1854      	adds	r4, r2, r1
 8007652:	42a3      	cmp	r3, r4
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	d1e0      	bne.n	800761a <_free_r+0x26>
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	6053      	str	r3, [r2, #4]
 800765e:	4421      	add	r1, r4
 8007660:	6011      	str	r1, [r2, #0]
 8007662:	e7da      	b.n	800761a <_free_r+0x26>
 8007664:	d902      	bls.n	800766c <_free_r+0x78>
 8007666:	230c      	movs	r3, #12
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	e7d6      	b.n	800761a <_free_r+0x26>
 800766c:	6825      	ldr	r5, [r4, #0]
 800766e:	1961      	adds	r1, r4, r5
 8007670:	428b      	cmp	r3, r1
 8007672:	bf04      	itt	eq
 8007674:	6819      	ldreq	r1, [r3, #0]
 8007676:	685b      	ldreq	r3, [r3, #4]
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	bf04      	itt	eq
 800767c:	1949      	addeq	r1, r1, r5
 800767e:	6021      	streq	r1, [r4, #0]
 8007680:	6054      	str	r4, [r2, #4]
 8007682:	e7ca      	b.n	800761a <_free_r+0x26>
 8007684:	b003      	add	sp, #12
 8007686:	bd30      	pop	{r4, r5, pc}
 8007688:	20001ea4 	.word	0x20001ea4

0800768c <sbrk_aligned>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4e0e      	ldr	r6, [pc, #56]	; (80076c8 <sbrk_aligned+0x3c>)
 8007690:	460c      	mov	r4, r1
 8007692:	6831      	ldr	r1, [r6, #0]
 8007694:	4605      	mov	r5, r0
 8007696:	b911      	cbnz	r1, 800769e <sbrk_aligned+0x12>
 8007698:	f000 f88c 	bl	80077b4 <_sbrk_r>
 800769c:	6030      	str	r0, [r6, #0]
 800769e:	4621      	mov	r1, r4
 80076a0:	4628      	mov	r0, r5
 80076a2:	f000 f887 	bl	80077b4 <_sbrk_r>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d00a      	beq.n	80076c0 <sbrk_aligned+0x34>
 80076aa:	1cc4      	adds	r4, r0, #3
 80076ac:	f024 0403 	bic.w	r4, r4, #3
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d007      	beq.n	80076c4 <sbrk_aligned+0x38>
 80076b4:	1a21      	subs	r1, r4, r0
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 f87c 	bl	80077b4 <_sbrk_r>
 80076bc:	3001      	adds	r0, #1
 80076be:	d101      	bne.n	80076c4 <sbrk_aligned+0x38>
 80076c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076c4:	4620      	mov	r0, r4
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	20001ea8 	.word	0x20001ea8

080076cc <_malloc_r>:
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	1ccd      	adds	r5, r1, #3
 80076d2:	f025 0503 	bic.w	r5, r5, #3
 80076d6:	3508      	adds	r5, #8
 80076d8:	2d0c      	cmp	r5, #12
 80076da:	bf38      	it	cc
 80076dc:	250c      	movcc	r5, #12
 80076de:	2d00      	cmp	r5, #0
 80076e0:	4607      	mov	r7, r0
 80076e2:	db01      	blt.n	80076e8 <_malloc_r+0x1c>
 80076e4:	42a9      	cmp	r1, r5
 80076e6:	d905      	bls.n	80076f4 <_malloc_r+0x28>
 80076e8:	230c      	movs	r3, #12
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	2600      	movs	r6, #0
 80076ee:	4630      	mov	r0, r6
 80076f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f4:	4e2e      	ldr	r6, [pc, #184]	; (80077b0 <_malloc_r+0xe4>)
 80076f6:	f000 f939 	bl	800796c <__malloc_lock>
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	461c      	mov	r4, r3
 80076fe:	bb34      	cbnz	r4, 800774e <_malloc_r+0x82>
 8007700:	4629      	mov	r1, r5
 8007702:	4638      	mov	r0, r7
 8007704:	f7ff ffc2 	bl	800768c <sbrk_aligned>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	4604      	mov	r4, r0
 800770c:	d14d      	bne.n	80077aa <_malloc_r+0xde>
 800770e:	6834      	ldr	r4, [r6, #0]
 8007710:	4626      	mov	r6, r4
 8007712:	2e00      	cmp	r6, #0
 8007714:	d140      	bne.n	8007798 <_malloc_r+0xcc>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	4631      	mov	r1, r6
 800771a:	4638      	mov	r0, r7
 800771c:	eb04 0803 	add.w	r8, r4, r3
 8007720:	f000 f848 	bl	80077b4 <_sbrk_r>
 8007724:	4580      	cmp	r8, r0
 8007726:	d13a      	bne.n	800779e <_malloc_r+0xd2>
 8007728:	6821      	ldr	r1, [r4, #0]
 800772a:	3503      	adds	r5, #3
 800772c:	1a6d      	subs	r5, r5, r1
 800772e:	f025 0503 	bic.w	r5, r5, #3
 8007732:	3508      	adds	r5, #8
 8007734:	2d0c      	cmp	r5, #12
 8007736:	bf38      	it	cc
 8007738:	250c      	movcc	r5, #12
 800773a:	4629      	mov	r1, r5
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ffa5 	bl	800768c <sbrk_aligned>
 8007742:	3001      	adds	r0, #1
 8007744:	d02b      	beq.n	800779e <_malloc_r+0xd2>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	442b      	add	r3, r5
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	e00e      	b.n	800776c <_malloc_r+0xa0>
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	1b52      	subs	r2, r2, r5
 8007752:	d41e      	bmi.n	8007792 <_malloc_r+0xc6>
 8007754:	2a0b      	cmp	r2, #11
 8007756:	d916      	bls.n	8007786 <_malloc_r+0xba>
 8007758:	1961      	adds	r1, r4, r5
 800775a:	42a3      	cmp	r3, r4
 800775c:	6025      	str	r5, [r4, #0]
 800775e:	bf18      	it	ne
 8007760:	6059      	strne	r1, [r3, #4]
 8007762:	6863      	ldr	r3, [r4, #4]
 8007764:	bf08      	it	eq
 8007766:	6031      	streq	r1, [r6, #0]
 8007768:	5162      	str	r2, [r4, r5]
 800776a:	604b      	str	r3, [r1, #4]
 800776c:	4638      	mov	r0, r7
 800776e:	f104 060b 	add.w	r6, r4, #11
 8007772:	f000 f901 	bl	8007978 <__malloc_unlock>
 8007776:	f026 0607 	bic.w	r6, r6, #7
 800777a:	1d23      	adds	r3, r4, #4
 800777c:	1af2      	subs	r2, r6, r3
 800777e:	d0b6      	beq.n	80076ee <_malloc_r+0x22>
 8007780:	1b9b      	subs	r3, r3, r6
 8007782:	50a3      	str	r3, [r4, r2]
 8007784:	e7b3      	b.n	80076ee <_malloc_r+0x22>
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	42a3      	cmp	r3, r4
 800778a:	bf0c      	ite	eq
 800778c:	6032      	streq	r2, [r6, #0]
 800778e:	605a      	strne	r2, [r3, #4]
 8007790:	e7ec      	b.n	800776c <_malloc_r+0xa0>
 8007792:	4623      	mov	r3, r4
 8007794:	6864      	ldr	r4, [r4, #4]
 8007796:	e7b2      	b.n	80076fe <_malloc_r+0x32>
 8007798:	4634      	mov	r4, r6
 800779a:	6876      	ldr	r6, [r6, #4]
 800779c:	e7b9      	b.n	8007712 <_malloc_r+0x46>
 800779e:	230c      	movs	r3, #12
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4638      	mov	r0, r7
 80077a4:	f000 f8e8 	bl	8007978 <__malloc_unlock>
 80077a8:	e7a1      	b.n	80076ee <_malloc_r+0x22>
 80077aa:	6025      	str	r5, [r4, #0]
 80077ac:	e7de      	b.n	800776c <_malloc_r+0xa0>
 80077ae:	bf00      	nop
 80077b0:	20001ea4 	.word	0x20001ea4

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	; (80077d0 <_sbrk_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7f9 fab2 	bl	8000d28 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20001eac 	.word	0x20001eac

080077d4 <siprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b500      	push	{lr}
 80077d8:	b09c      	sub	sp, #112	; 0x70
 80077da:	ab1d      	add	r3, sp, #116	; 0x74
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	9006      	str	r0, [sp, #24]
 80077e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077e4:	4809      	ldr	r0, [pc, #36]	; (800780c <siprintf+0x38>)
 80077e6:	9107      	str	r1, [sp, #28]
 80077e8:	9104      	str	r1, [sp, #16]
 80077ea:	4909      	ldr	r1, [pc, #36]	; (8007810 <siprintf+0x3c>)
 80077ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f0:	9105      	str	r1, [sp, #20]
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	a902      	add	r1, sp, #8
 80077f8:	f000 f920 	bl	8007a3c <_svfiprintf_r>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	b01c      	add	sp, #112	; 0x70
 8007804:	f85d eb04 	ldr.w	lr, [sp], #4
 8007808:	b003      	add	sp, #12
 800780a:	4770      	bx	lr
 800780c:	2000013c 	.word	0x2000013c
 8007810:	ffff0208 	.word	0xffff0208

08007814 <strtok>:
 8007814:	4b16      	ldr	r3, [pc, #88]	; (8007870 <strtok+0x5c>)
 8007816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007818:	681e      	ldr	r6, [r3, #0]
 800781a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800781c:	4605      	mov	r5, r0
 800781e:	b9fc      	cbnz	r4, 8007860 <strtok+0x4c>
 8007820:	2050      	movs	r0, #80	; 0x50
 8007822:	9101      	str	r1, [sp, #4]
 8007824:	f7ff fece 	bl	80075c4 <malloc>
 8007828:	9901      	ldr	r1, [sp, #4]
 800782a:	65b0      	str	r0, [r6, #88]	; 0x58
 800782c:	4602      	mov	r2, r0
 800782e:	b920      	cbnz	r0, 800783a <strtok+0x26>
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <strtok+0x60>)
 8007832:	4811      	ldr	r0, [pc, #68]	; (8007878 <strtok+0x64>)
 8007834:	2157      	movs	r1, #87	; 0x57
 8007836:	f000 f869 	bl	800790c <__assert_func>
 800783a:	e9c0 4400 	strd	r4, r4, [r0]
 800783e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007842:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007846:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800784a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800784e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007852:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007856:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800785a:	6184      	str	r4, [r0, #24]
 800785c:	7704      	strb	r4, [r0, #28]
 800785e:	6244      	str	r4, [r0, #36]	; 0x24
 8007860:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007862:	2301      	movs	r3, #1
 8007864:	4628      	mov	r0, r5
 8007866:	b002      	add	sp, #8
 8007868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800786c:	f000 b806 	b.w	800787c <__strtok_r>
 8007870:	2000013c 	.word	0x2000013c
 8007874:	08008c0c 	.word	0x08008c0c
 8007878:	08008c23 	.word	0x08008c23

0800787c <__strtok_r>:
 800787c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787e:	b908      	cbnz	r0, 8007884 <__strtok_r+0x8>
 8007880:	6810      	ldr	r0, [r2, #0]
 8007882:	b188      	cbz	r0, 80078a8 <__strtok_r+0x2c>
 8007884:	4604      	mov	r4, r0
 8007886:	4620      	mov	r0, r4
 8007888:	f814 5b01 	ldrb.w	r5, [r4], #1
 800788c:	460f      	mov	r7, r1
 800788e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007892:	b91e      	cbnz	r6, 800789c <__strtok_r+0x20>
 8007894:	b965      	cbnz	r5, 80078b0 <__strtok_r+0x34>
 8007896:	6015      	str	r5, [r2, #0]
 8007898:	4628      	mov	r0, r5
 800789a:	e005      	b.n	80078a8 <__strtok_r+0x2c>
 800789c:	42b5      	cmp	r5, r6
 800789e:	d1f6      	bne.n	800788e <__strtok_r+0x12>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f0      	bne.n	8007886 <__strtok_r+0xa>
 80078a4:	6014      	str	r4, [r2, #0]
 80078a6:	7003      	strb	r3, [r0, #0]
 80078a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078aa:	461c      	mov	r4, r3
 80078ac:	e00c      	b.n	80078c8 <__strtok_r+0x4c>
 80078ae:	b915      	cbnz	r5, 80078b6 <__strtok_r+0x3a>
 80078b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078b4:	460e      	mov	r6, r1
 80078b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	d1f7      	bne.n	80078ae <__strtok_r+0x32>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f3      	beq.n	80078aa <__strtok_r+0x2e>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80078c8:	6014      	str	r4, [r2, #0]
 80078ca:	e7ed      	b.n	80078a8 <__strtok_r+0x2c>

080078cc <_vsiprintf_r>:
 80078cc:	b500      	push	{lr}
 80078ce:	b09b      	sub	sp, #108	; 0x6c
 80078d0:	9100      	str	r1, [sp, #0]
 80078d2:	9104      	str	r1, [sp, #16]
 80078d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078d8:	9105      	str	r1, [sp, #20]
 80078da:	9102      	str	r1, [sp, #8]
 80078dc:	4905      	ldr	r1, [pc, #20]	; (80078f4 <_vsiprintf_r+0x28>)
 80078de:	9103      	str	r1, [sp, #12]
 80078e0:	4669      	mov	r1, sp
 80078e2:	f000 f8ab 	bl	8007a3c <_svfiprintf_r>
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	b01b      	add	sp, #108	; 0x6c
 80078ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80078f2:	bf00      	nop
 80078f4:	ffff0208 	.word	0xffff0208

080078f8 <vsiprintf>:
 80078f8:	4613      	mov	r3, r2
 80078fa:	460a      	mov	r2, r1
 80078fc:	4601      	mov	r1, r0
 80078fe:	4802      	ldr	r0, [pc, #8]	; (8007908 <vsiprintf+0x10>)
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	f7ff bfe3 	b.w	80078cc <_vsiprintf_r>
 8007906:	bf00      	nop
 8007908:	2000013c 	.word	0x2000013c

0800790c <__assert_func>:
 800790c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800790e:	4614      	mov	r4, r2
 8007910:	461a      	mov	r2, r3
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <__assert_func+0x2c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4605      	mov	r5, r0
 8007918:	68d8      	ldr	r0, [r3, #12]
 800791a:	b14c      	cbz	r4, 8007930 <__assert_func+0x24>
 800791c:	4b07      	ldr	r3, [pc, #28]	; (800793c <__assert_func+0x30>)
 800791e:	9100      	str	r1, [sp, #0]
 8007920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007924:	4906      	ldr	r1, [pc, #24]	; (8007940 <__assert_func+0x34>)
 8007926:	462b      	mov	r3, r5
 8007928:	f000 f80e 	bl	8007948 <fiprintf>
 800792c:	f000 fd34 	bl	8008398 <abort>
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <__assert_func+0x38>)
 8007932:	461c      	mov	r4, r3
 8007934:	e7f3      	b.n	800791e <__assert_func+0x12>
 8007936:	bf00      	nop
 8007938:	2000013c 	.word	0x2000013c
 800793c:	08008c80 	.word	0x08008c80
 8007940:	08008c8d 	.word	0x08008c8d
 8007944:	08008cbb 	.word	0x08008cbb

08007948 <fiprintf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	b503      	push	{r0, r1, lr}
 800794c:	4601      	mov	r1, r0
 800794e:	ab03      	add	r3, sp, #12
 8007950:	4805      	ldr	r0, [pc, #20]	; (8007968 <fiprintf+0x20>)
 8007952:	f853 2b04 	ldr.w	r2, [r3], #4
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f000 f999 	bl	8007c90 <_vfiprintf_r>
 800795e:	b002      	add	sp, #8
 8007960:	f85d eb04 	ldr.w	lr, [sp], #4
 8007964:	b003      	add	sp, #12
 8007966:	4770      	bx	lr
 8007968:	2000013c 	.word	0x2000013c

0800796c <__malloc_lock>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__malloc_lock+0x8>)
 800796e:	f000 bed3 	b.w	8008718 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	20001eb0 	.word	0x20001eb0

08007978 <__malloc_unlock>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__malloc_unlock+0x8>)
 800797a:	f000 bece 	b.w	800871a <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	20001eb0 	.word	0x20001eb0

08007984 <__ssputs_r>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	688e      	ldr	r6, [r1, #8]
 800798a:	429e      	cmp	r6, r3
 800798c:	4682      	mov	sl, r0
 800798e:	460c      	mov	r4, r1
 8007990:	4690      	mov	r8, r2
 8007992:	461f      	mov	r7, r3
 8007994:	d838      	bhi.n	8007a08 <__ssputs_r+0x84>
 8007996:	898a      	ldrh	r2, [r1, #12]
 8007998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800799c:	d032      	beq.n	8007a04 <__ssputs_r+0x80>
 800799e:	6825      	ldr	r5, [r4, #0]
 80079a0:	6909      	ldr	r1, [r1, #16]
 80079a2:	eba5 0901 	sub.w	r9, r5, r1
 80079a6:	6965      	ldr	r5, [r4, #20]
 80079a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b0:	3301      	adds	r3, #1
 80079b2:	444b      	add	r3, r9
 80079b4:	106d      	asrs	r5, r5, #1
 80079b6:	429d      	cmp	r5, r3
 80079b8:	bf38      	it	cc
 80079ba:	461d      	movcc	r5, r3
 80079bc:	0553      	lsls	r3, r2, #21
 80079be:	d531      	bpl.n	8007a24 <__ssputs_r+0xa0>
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7ff fe83 	bl	80076cc <_malloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	b950      	cbnz	r0, 80079e0 <__ssputs_r+0x5c>
 80079ca:	230c      	movs	r3, #12
 80079cc:	f8ca 3000 	str.w	r3, [sl]
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	6921      	ldr	r1, [r4, #16]
 80079e2:	464a      	mov	r2, r9
 80079e4:	f000 ff00 	bl	80087e8 <memcpy>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	6126      	str	r6, [r4, #16]
 80079f6:	6165      	str	r5, [r4, #20]
 80079f8:	444e      	add	r6, r9
 80079fa:	eba5 0509 	sub.w	r5, r5, r9
 80079fe:	6026      	str	r6, [r4, #0]
 8007a00:	60a5      	str	r5, [r4, #8]
 8007a02:	463e      	mov	r6, r7
 8007a04:	42be      	cmp	r6, r7
 8007a06:	d900      	bls.n	8007a0a <__ssputs_r+0x86>
 8007a08:	463e      	mov	r6, r7
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	4641      	mov	r1, r8
 8007a10:	f000 fef8 	bl	8008804 <memmove>
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	1b9b      	subs	r3, r3, r6
 8007a18:	60a3      	str	r3, [r4, #8]
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	4433      	add	r3, r6
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7db      	b.n	80079dc <__ssputs_r+0x58>
 8007a24:	462a      	mov	r2, r5
 8007a26:	f000 ff07 	bl	8008838 <_realloc_r>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d1e1      	bne.n	80079f4 <__ssputs_r+0x70>
 8007a30:	6921      	ldr	r1, [r4, #16]
 8007a32:	4650      	mov	r0, sl
 8007a34:	f7ff fdde 	bl	80075f4 <_free_r>
 8007a38:	e7c7      	b.n	80079ca <__ssputs_r+0x46>
	...

08007a3c <_svfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4698      	mov	r8, r3
 8007a42:	898b      	ldrh	r3, [r1, #12]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	b09d      	sub	sp, #116	; 0x74
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	d50e      	bpl.n	8007a6e <_svfiprintf_r+0x32>
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	b963      	cbnz	r3, 8007a6e <_svfiprintf_r+0x32>
 8007a54:	2140      	movs	r1, #64	; 0x40
 8007a56:	f7ff fe39 	bl	80076cc <_malloc_r>
 8007a5a:	6028      	str	r0, [r5, #0]
 8007a5c:	6128      	str	r0, [r5, #16]
 8007a5e:	b920      	cbnz	r0, 8007a6a <_svfiprintf_r+0x2e>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a68:	e0d1      	b.n	8007c0e <_svfiprintf_r+0x1d2>
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	616b      	str	r3, [r5, #20]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	2320      	movs	r3, #32
 8007a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a7c:	2330      	movs	r3, #48	; 0x30
 8007a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c28 <_svfiprintf_r+0x1ec>
 8007a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a86:	f04f 0901 	mov.w	r9, #1
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	469a      	mov	sl, r3
 8007a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a92:	b10a      	cbz	r2, 8007a98 <_svfiprintf_r+0x5c>
 8007a94:	2a25      	cmp	r2, #37	; 0x25
 8007a96:	d1f9      	bne.n	8007a8c <_svfiprintf_r+0x50>
 8007a98:	ebba 0b04 	subs.w	fp, sl, r4
 8007a9c:	d00b      	beq.n	8007ab6 <_svfiprintf_r+0x7a>
 8007a9e:	465b      	mov	r3, fp
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff ff6d 	bl	8007984 <__ssputs_r>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f000 80aa 	beq.w	8007c04 <_svfiprintf_r+0x1c8>
 8007ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab2:	445a      	add	r2, fp
 8007ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80a2 	beq.w	8007c04 <_svfiprintf_r+0x1c8>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aca:	f10a 0a01 	add.w	sl, sl, #1
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	9307      	str	r3, [sp, #28]
 8007ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad8:	4654      	mov	r4, sl
 8007ada:	2205      	movs	r2, #5
 8007adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae0:	4851      	ldr	r0, [pc, #324]	; (8007c28 <_svfiprintf_r+0x1ec>)
 8007ae2:	f7f8 fb85 	bl	80001f0 <memchr>
 8007ae6:	9a04      	ldr	r2, [sp, #16]
 8007ae8:	b9d8      	cbnz	r0, 8007b22 <_svfiprintf_r+0xe6>
 8007aea:	06d0      	lsls	r0, r2, #27
 8007aec:	bf44      	itt	mi
 8007aee:	2320      	movmi	r3, #32
 8007af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af4:	0711      	lsls	r1, r2, #28
 8007af6:	bf44      	itt	mi
 8007af8:	232b      	movmi	r3, #43	; 0x2b
 8007afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afe:	f89a 3000 	ldrb.w	r3, [sl]
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d015      	beq.n	8007b32 <_svfiprintf_r+0xf6>
 8007b06:	9a07      	ldr	r2, [sp, #28]
 8007b08:	4654      	mov	r4, sl
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4621      	mov	r1, r4
 8007b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b16:	3b30      	subs	r3, #48	; 0x30
 8007b18:	2b09      	cmp	r3, #9
 8007b1a:	d94e      	bls.n	8007bba <_svfiprintf_r+0x17e>
 8007b1c:	b1b0      	cbz	r0, 8007b4c <_svfiprintf_r+0x110>
 8007b1e:	9207      	str	r2, [sp, #28]
 8007b20:	e014      	b.n	8007b4c <_svfiprintf_r+0x110>
 8007b22:	eba0 0308 	sub.w	r3, r0, r8
 8007b26:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	46a2      	mov	sl, r4
 8007b30:	e7d2      	b.n	8007ad8 <_svfiprintf_r+0x9c>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	1d19      	adds	r1, r3, #4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	9103      	str	r1, [sp, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bfbb      	ittet	lt
 8007b3e:	425b      	neglt	r3, r3
 8007b40:	f042 0202 	orrlt.w	r2, r2, #2
 8007b44:	9307      	strge	r3, [sp, #28]
 8007b46:	9307      	strlt	r3, [sp, #28]
 8007b48:	bfb8      	it	lt
 8007b4a:	9204      	strlt	r2, [sp, #16]
 8007b4c:	7823      	ldrb	r3, [r4, #0]
 8007b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b50:	d10c      	bne.n	8007b6c <_svfiprintf_r+0x130>
 8007b52:	7863      	ldrb	r3, [r4, #1]
 8007b54:	2b2a      	cmp	r3, #42	; 0x2a
 8007b56:	d135      	bne.n	8007bc4 <_svfiprintf_r+0x188>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9203      	str	r2, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfb8      	it	lt
 8007b64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b68:	3402      	adds	r4, #2
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c38 <_svfiprintf_r+0x1fc>
 8007b70:	7821      	ldrb	r1, [r4, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	4650      	mov	r0, sl
 8007b76:	f7f8 fb3b 	bl	80001f0 <memchr>
 8007b7a:	b140      	cbz	r0, 8007b8e <_svfiprintf_r+0x152>
 8007b7c:	2340      	movs	r3, #64	; 0x40
 8007b7e:	eba0 000a 	sub.w	r0, r0, sl
 8007b82:	fa03 f000 	lsl.w	r0, r3, r0
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	4303      	orrs	r3, r0
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b92:	4826      	ldr	r0, [pc, #152]	; (8007c2c <_svfiprintf_r+0x1f0>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b98:	2206      	movs	r2, #6
 8007b9a:	f7f8 fb29 	bl	80001f0 <memchr>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d038      	beq.n	8007c14 <_svfiprintf_r+0x1d8>
 8007ba2:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <_svfiprintf_r+0x1f4>)
 8007ba4:	bb1b      	cbnz	r3, 8007bee <_svfiprintf_r+0x1b2>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	4433      	add	r3, r6
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	e767      	b.n	8007a8a <_svfiprintf_r+0x4e>
 8007bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	e7a5      	b.n	8007b10 <_svfiprintf_r+0xd4>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	3401      	adds	r4, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f04f 0c0a 	mov.w	ip, #10
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd6:	3a30      	subs	r2, #48	; 0x30
 8007bd8:	2a09      	cmp	r2, #9
 8007bda:	d903      	bls.n	8007be4 <_svfiprintf_r+0x1a8>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0c5      	beq.n	8007b6c <_svfiprintf_r+0x130>
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	e7c3      	b.n	8007b6c <_svfiprintf_r+0x130>
 8007be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be8:	4604      	mov	r4, r0
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7f0      	b.n	8007bd0 <_svfiprintf_r+0x194>
 8007bee:	ab03      	add	r3, sp, #12
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <_svfiprintf_r+0x1f8>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f3af 8000 	nop.w
 8007bfe:	1c42      	adds	r2, r0, #1
 8007c00:	4606      	mov	r6, r0
 8007c02:	d1d6      	bne.n	8007bb2 <_svfiprintf_r+0x176>
 8007c04:	89ab      	ldrh	r3, [r5, #12]
 8007c06:	065b      	lsls	r3, r3, #25
 8007c08:	f53f af2c 	bmi.w	8007a64 <_svfiprintf_r+0x28>
 8007c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c0e:	b01d      	add	sp, #116	; 0x74
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <_svfiprintf_r+0x1f8>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f000 f9d4 	bl	8007fcc <_printf_i>
 8007c24:	e7eb      	b.n	8007bfe <_svfiprintf_r+0x1c2>
 8007c26:	bf00      	nop
 8007c28:	08008cbc 	.word	0x08008cbc
 8007c2c:	08008cc6 	.word	0x08008cc6
 8007c30:	00000000 	.word	0x00000000
 8007c34:	08007985 	.word	0x08007985
 8007c38:	08008cc2 	.word	0x08008cc2

08007c3c <__sfputc_r>:
 8007c3c:	6893      	ldr	r3, [r2, #8]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	b410      	push	{r4}
 8007c44:	6093      	str	r3, [r2, #8]
 8007c46:	da08      	bge.n	8007c5a <__sfputc_r+0x1e>
 8007c48:	6994      	ldr	r4, [r2, #24]
 8007c4a:	42a3      	cmp	r3, r4
 8007c4c:	db01      	blt.n	8007c52 <__sfputc_r+0x16>
 8007c4e:	290a      	cmp	r1, #10
 8007c50:	d103      	bne.n	8007c5a <__sfputc_r+0x1e>
 8007c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c56:	f000 badf 	b.w	8008218 <__swbuf_r>
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	1c58      	adds	r0, r3, #1
 8007c5e:	6010      	str	r0, [r2, #0]
 8007c60:	7019      	strb	r1, [r3, #0]
 8007c62:	4608      	mov	r0, r1
 8007c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <__sfputs_r>:
 8007c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	18d5      	adds	r5, r2, r3
 8007c74:	42ac      	cmp	r4, r5
 8007c76:	d101      	bne.n	8007c7c <__sfputs_r+0x12>
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e007      	b.n	8007c8c <__sfputs_r+0x22>
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	463a      	mov	r2, r7
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ffda 	bl	8007c3c <__sfputc_r>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d1f3      	bne.n	8007c74 <__sfputs_r+0xa>
 8007c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c90 <_vfiprintf_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	460d      	mov	r5, r1
 8007c96:	b09d      	sub	sp, #116	; 0x74
 8007c98:	4614      	mov	r4, r2
 8007c9a:	4698      	mov	r8, r3
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	b118      	cbz	r0, 8007ca8 <_vfiprintf_r+0x18>
 8007ca0:	6983      	ldr	r3, [r0, #24]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <_vfiprintf_r+0x18>
 8007ca4:	f000 fc9a 	bl	80085dc <__sinit>
 8007ca8:	4b89      	ldr	r3, [pc, #548]	; (8007ed0 <_vfiprintf_r+0x240>)
 8007caa:	429d      	cmp	r5, r3
 8007cac:	d11b      	bne.n	8007ce6 <_vfiprintf_r+0x56>
 8007cae:	6875      	ldr	r5, [r6, #4]
 8007cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb2:	07d9      	lsls	r1, r3, #31
 8007cb4:	d405      	bmi.n	8007cc2 <_vfiprintf_r+0x32>
 8007cb6:	89ab      	ldrh	r3, [r5, #12]
 8007cb8:	059a      	lsls	r2, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_vfiprintf_r+0x32>
 8007cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cbe:	f000 fd2b 	bl	8008718 <__retarget_lock_acquire_recursive>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	071b      	lsls	r3, r3, #28
 8007cc6:	d501      	bpl.n	8007ccc <_vfiprintf_r+0x3c>
 8007cc8:	692b      	ldr	r3, [r5, #16]
 8007cca:	b9eb      	cbnz	r3, 8007d08 <_vfiprintf_r+0x78>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f000 faf4 	bl	80082bc <__swsetup_r>
 8007cd4:	b1c0      	cbz	r0, 8007d08 <_vfiprintf_r+0x78>
 8007cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cd8:	07dc      	lsls	r4, r3, #31
 8007cda:	d50e      	bpl.n	8007cfa <_vfiprintf_r+0x6a>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce0:	b01d      	add	sp, #116	; 0x74
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	4b7b      	ldr	r3, [pc, #492]	; (8007ed4 <_vfiprintf_r+0x244>)
 8007ce8:	429d      	cmp	r5, r3
 8007cea:	d101      	bne.n	8007cf0 <_vfiprintf_r+0x60>
 8007cec:	68b5      	ldr	r5, [r6, #8]
 8007cee:	e7df      	b.n	8007cb0 <_vfiprintf_r+0x20>
 8007cf0:	4b79      	ldr	r3, [pc, #484]	; (8007ed8 <_vfiprintf_r+0x248>)
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	bf08      	it	eq
 8007cf6:	68f5      	ldreq	r5, [r6, #12]
 8007cf8:	e7da      	b.n	8007cb0 <_vfiprintf_r+0x20>
 8007cfa:	89ab      	ldrh	r3, [r5, #12]
 8007cfc:	0598      	lsls	r0, r3, #22
 8007cfe:	d4ed      	bmi.n	8007cdc <_vfiprintf_r+0x4c>
 8007d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d02:	f000 fd0a 	bl	800871a <__retarget_lock_release_recursive>
 8007d06:	e7e9      	b.n	8007cdc <_vfiprintf_r+0x4c>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d16:	2330      	movs	r3, #48	; 0x30
 8007d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007edc <_vfiprintf_r+0x24c>
 8007d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d20:	f04f 0901 	mov.w	r9, #1
 8007d24:	4623      	mov	r3, r4
 8007d26:	469a      	mov	sl, r3
 8007d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d2c:	b10a      	cbz	r2, 8007d32 <_vfiprintf_r+0xa2>
 8007d2e:	2a25      	cmp	r2, #37	; 0x25
 8007d30:	d1f9      	bne.n	8007d26 <_vfiprintf_r+0x96>
 8007d32:	ebba 0b04 	subs.w	fp, sl, r4
 8007d36:	d00b      	beq.n	8007d50 <_vfiprintf_r+0xc0>
 8007d38:	465b      	mov	r3, fp
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff93 	bl	8007c6a <__sfputs_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	f000 80aa 	beq.w	8007e9e <_vfiprintf_r+0x20e>
 8007d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d4c:	445a      	add	r2, fp
 8007d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d50:	f89a 3000 	ldrb.w	r3, [sl]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80a2 	beq.w	8007e9e <_vfiprintf_r+0x20e>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d64:	f10a 0a01 	add.w	sl, sl, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d70:	931a      	str	r3, [sp, #104]	; 0x68
 8007d72:	4654      	mov	r4, sl
 8007d74:	2205      	movs	r2, #5
 8007d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7a:	4858      	ldr	r0, [pc, #352]	; (8007edc <_vfiprintf_r+0x24c>)
 8007d7c:	f7f8 fa38 	bl	80001f0 <memchr>
 8007d80:	9a04      	ldr	r2, [sp, #16]
 8007d82:	b9d8      	cbnz	r0, 8007dbc <_vfiprintf_r+0x12c>
 8007d84:	06d1      	lsls	r1, r2, #27
 8007d86:	bf44      	itt	mi
 8007d88:	2320      	movmi	r3, #32
 8007d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8e:	0713      	lsls	r3, r2, #28
 8007d90:	bf44      	itt	mi
 8007d92:	232b      	movmi	r3, #43	; 0x2b
 8007d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9e:	d015      	beq.n	8007dcc <_vfiprintf_r+0x13c>
 8007da0:	9a07      	ldr	r2, [sp, #28]
 8007da2:	4654      	mov	r4, sl
 8007da4:	2000      	movs	r0, #0
 8007da6:	f04f 0c0a 	mov.w	ip, #10
 8007daa:	4621      	mov	r1, r4
 8007dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db0:	3b30      	subs	r3, #48	; 0x30
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d94e      	bls.n	8007e54 <_vfiprintf_r+0x1c4>
 8007db6:	b1b0      	cbz	r0, 8007de6 <_vfiprintf_r+0x156>
 8007db8:	9207      	str	r2, [sp, #28]
 8007dba:	e014      	b.n	8007de6 <_vfiprintf_r+0x156>
 8007dbc:	eba0 0308 	sub.w	r3, r0, r8
 8007dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	46a2      	mov	sl, r4
 8007dca:	e7d2      	b.n	8007d72 <_vfiprintf_r+0xe2>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	1d19      	adds	r1, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	9103      	str	r1, [sp, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfbb      	ittet	lt
 8007dd8:	425b      	neglt	r3, r3
 8007dda:	f042 0202 	orrlt.w	r2, r2, #2
 8007dde:	9307      	strge	r3, [sp, #28]
 8007de0:	9307      	strlt	r3, [sp, #28]
 8007de2:	bfb8      	it	lt
 8007de4:	9204      	strlt	r2, [sp, #16]
 8007de6:	7823      	ldrb	r3, [r4, #0]
 8007de8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dea:	d10c      	bne.n	8007e06 <_vfiprintf_r+0x176>
 8007dec:	7863      	ldrb	r3, [r4, #1]
 8007dee:	2b2a      	cmp	r3, #42	; 0x2a
 8007df0:	d135      	bne.n	8007e5e <_vfiprintf_r+0x1ce>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	9203      	str	r2, [sp, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfb8      	it	lt
 8007dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e02:	3402      	adds	r4, #2
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007eec <_vfiprintf_r+0x25c>
 8007e0a:	7821      	ldrb	r1, [r4, #0]
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	4650      	mov	r0, sl
 8007e10:	f7f8 f9ee 	bl	80001f0 <memchr>
 8007e14:	b140      	cbz	r0, 8007e28 <_vfiprintf_r+0x198>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	eba0 000a 	sub.w	r0, r0, sl
 8007e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	4303      	orrs	r3, r0
 8007e24:	3401      	adds	r4, #1
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2c:	482c      	ldr	r0, [pc, #176]	; (8007ee0 <_vfiprintf_r+0x250>)
 8007e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e32:	2206      	movs	r2, #6
 8007e34:	f7f8 f9dc 	bl	80001f0 <memchr>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d03f      	beq.n	8007ebc <_vfiprintf_r+0x22c>
 8007e3c:	4b29      	ldr	r3, [pc, #164]	; (8007ee4 <_vfiprintf_r+0x254>)
 8007e3e:	bb1b      	cbnz	r3, 8007e88 <_vfiprintf_r+0x1f8>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3307      	adds	r3, #7
 8007e44:	f023 0307 	bic.w	r3, r3, #7
 8007e48:	3308      	adds	r3, #8
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4e:	443b      	add	r3, r7
 8007e50:	9309      	str	r3, [sp, #36]	; 0x24
 8007e52:	e767      	b.n	8007d24 <_vfiprintf_r+0x94>
 8007e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e58:	460c      	mov	r4, r1
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e7a5      	b.n	8007daa <_vfiprintf_r+0x11a>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	3401      	adds	r4, #1
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	4619      	mov	r1, r3
 8007e66:	f04f 0c0a 	mov.w	ip, #10
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e70:	3a30      	subs	r2, #48	; 0x30
 8007e72:	2a09      	cmp	r2, #9
 8007e74:	d903      	bls.n	8007e7e <_vfiprintf_r+0x1ee>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0c5      	beq.n	8007e06 <_vfiprintf_r+0x176>
 8007e7a:	9105      	str	r1, [sp, #20]
 8007e7c:	e7c3      	b.n	8007e06 <_vfiprintf_r+0x176>
 8007e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e82:	4604      	mov	r4, r0
 8007e84:	2301      	movs	r3, #1
 8007e86:	e7f0      	b.n	8007e6a <_vfiprintf_r+0x1da>
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <_vfiprintf_r+0x258>)
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	4630      	mov	r0, r6
 8007e94:	f3af 8000 	nop.w
 8007e98:	4607      	mov	r7, r0
 8007e9a:	1c78      	adds	r0, r7, #1
 8007e9c:	d1d6      	bne.n	8007e4c <_vfiprintf_r+0x1bc>
 8007e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea0:	07d9      	lsls	r1, r3, #31
 8007ea2:	d405      	bmi.n	8007eb0 <_vfiprintf_r+0x220>
 8007ea4:	89ab      	ldrh	r3, [r5, #12]
 8007ea6:	059a      	lsls	r2, r3, #22
 8007ea8:	d402      	bmi.n	8007eb0 <_vfiprintf_r+0x220>
 8007eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eac:	f000 fc35 	bl	800871a <__retarget_lock_release_recursive>
 8007eb0:	89ab      	ldrh	r3, [r5, #12]
 8007eb2:	065b      	lsls	r3, r3, #25
 8007eb4:	f53f af12 	bmi.w	8007cdc <_vfiprintf_r+0x4c>
 8007eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eba:	e711      	b.n	8007ce0 <_vfiprintf_r+0x50>
 8007ebc:	ab03      	add	r3, sp, #12
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <_vfiprintf_r+0x258>)
 8007ec4:	a904      	add	r1, sp, #16
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f880 	bl	8007fcc <_printf_i>
 8007ecc:	e7e4      	b.n	8007e98 <_vfiprintf_r+0x208>
 8007ece:	bf00      	nop
 8007ed0:	08008d10 	.word	0x08008d10
 8007ed4:	08008d30 	.word	0x08008d30
 8007ed8:	08008cf0 	.word	0x08008cf0
 8007edc:	08008cbc 	.word	0x08008cbc
 8007ee0:	08008cc6 	.word	0x08008cc6
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	08007c6b 	.word	0x08007c6b
 8007eec:	08008cc2 	.word	0x08008cc2

08007ef0 <_printf_common>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	4699      	mov	r9, r3
 8007ef8:	688a      	ldr	r2, [r1, #8]
 8007efa:	690b      	ldr	r3, [r1, #16]
 8007efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	bfb8      	it	lt
 8007f04:	4613      	movlt	r3, r2
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	b10a      	cbz	r2, 8007f16 <_printf_common+0x26>
 8007f12:	3301      	adds	r3, #1
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	0699      	lsls	r1, r3, #26
 8007f1a:	bf42      	ittt	mi
 8007f1c:	6833      	ldrmi	r3, [r6, #0]
 8007f1e:	3302      	addmi	r3, #2
 8007f20:	6033      	strmi	r3, [r6, #0]
 8007f22:	6825      	ldr	r5, [r4, #0]
 8007f24:	f015 0506 	ands.w	r5, r5, #6
 8007f28:	d106      	bne.n	8007f38 <_printf_common+0x48>
 8007f2a:	f104 0a19 	add.w	sl, r4, #25
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	6832      	ldr	r2, [r6, #0]
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	42ab      	cmp	r3, r5
 8007f36:	dc26      	bgt.n	8007f86 <_printf_common+0x96>
 8007f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f3c:	1e13      	subs	r3, r2, #0
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	bf18      	it	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	0692      	lsls	r2, r2, #26
 8007f46:	d42b      	bmi.n	8007fa0 <_printf_common+0xb0>
 8007f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4638      	mov	r0, r7
 8007f50:	47c0      	blx	r8
 8007f52:	3001      	adds	r0, #1
 8007f54:	d01e      	beq.n	8007f94 <_printf_common+0xa4>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	68e5      	ldr	r5, [r4, #12]
 8007f5a:	6832      	ldr	r2, [r6, #0]
 8007f5c:	f003 0306 	and.w	r3, r3, #6
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	bf08      	it	eq
 8007f64:	1aad      	subeq	r5, r5, r2
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	6922      	ldr	r2, [r4, #16]
 8007f6a:	bf0c      	ite	eq
 8007f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f70:	2500      	movne	r5, #0
 8007f72:	4293      	cmp	r3, r2
 8007f74:	bfc4      	itt	gt
 8007f76:	1a9b      	subgt	r3, r3, r2
 8007f78:	18ed      	addgt	r5, r5, r3
 8007f7a:	2600      	movs	r6, #0
 8007f7c:	341a      	adds	r4, #26
 8007f7e:	42b5      	cmp	r5, r6
 8007f80:	d11a      	bne.n	8007fb8 <_printf_common+0xc8>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e008      	b.n	8007f98 <_printf_common+0xa8>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	47c0      	blx	r8
 8007f90:	3001      	adds	r0, #1
 8007f92:	d103      	bne.n	8007f9c <_printf_common+0xac>
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	e7c6      	b.n	8007f2e <_printf_common+0x3e>
 8007fa0:	18e1      	adds	r1, r4, r3
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	2030      	movs	r0, #48	; 0x30
 8007fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007faa:	4422      	add	r2, r4
 8007fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	e7c7      	b.n	8007f48 <_printf_common+0x58>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c0      	blx	r8
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d0e6      	beq.n	8007f94 <_printf_common+0xa4>
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	e7d9      	b.n	8007f7e <_printf_common+0x8e>
	...

08007fcc <_printf_i>:
 8007fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	7e0f      	ldrb	r7, [r1, #24]
 8007fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fd4:	2f78      	cmp	r7, #120	; 0x78
 8007fd6:	4691      	mov	r9, r2
 8007fd8:	4680      	mov	r8, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	469a      	mov	sl, r3
 8007fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fe2:	d807      	bhi.n	8007ff4 <_printf_i+0x28>
 8007fe4:	2f62      	cmp	r7, #98	; 0x62
 8007fe6:	d80a      	bhi.n	8007ffe <_printf_i+0x32>
 8007fe8:	2f00      	cmp	r7, #0
 8007fea:	f000 80d8 	beq.w	800819e <_printf_i+0x1d2>
 8007fee:	2f58      	cmp	r7, #88	; 0x58
 8007ff0:	f000 80a3 	beq.w	800813a <_printf_i+0x16e>
 8007ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ffc:	e03a      	b.n	8008074 <_printf_i+0xa8>
 8007ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008002:	2b15      	cmp	r3, #21
 8008004:	d8f6      	bhi.n	8007ff4 <_printf_i+0x28>
 8008006:	a101      	add	r1, pc, #4	; (adr r1, 800800c <_printf_i+0x40>)
 8008008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800800c:	08008065 	.word	0x08008065
 8008010:	08008079 	.word	0x08008079
 8008014:	08007ff5 	.word	0x08007ff5
 8008018:	08007ff5 	.word	0x08007ff5
 800801c:	08007ff5 	.word	0x08007ff5
 8008020:	08007ff5 	.word	0x08007ff5
 8008024:	08008079 	.word	0x08008079
 8008028:	08007ff5 	.word	0x08007ff5
 800802c:	08007ff5 	.word	0x08007ff5
 8008030:	08007ff5 	.word	0x08007ff5
 8008034:	08007ff5 	.word	0x08007ff5
 8008038:	08008185 	.word	0x08008185
 800803c:	080080a9 	.word	0x080080a9
 8008040:	08008167 	.word	0x08008167
 8008044:	08007ff5 	.word	0x08007ff5
 8008048:	08007ff5 	.word	0x08007ff5
 800804c:	080081a7 	.word	0x080081a7
 8008050:	08007ff5 	.word	0x08007ff5
 8008054:	080080a9 	.word	0x080080a9
 8008058:	08007ff5 	.word	0x08007ff5
 800805c:	08007ff5 	.word	0x08007ff5
 8008060:	0800816f 	.word	0x0800816f
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	1d1a      	adds	r2, r3, #4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	602a      	str	r2, [r5, #0]
 800806c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008074:	2301      	movs	r3, #1
 8008076:	e0a3      	b.n	80081c0 <_printf_i+0x1f4>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	6829      	ldr	r1, [r5, #0]
 800807c:	0606      	lsls	r6, r0, #24
 800807e:	f101 0304 	add.w	r3, r1, #4
 8008082:	d50a      	bpl.n	800809a <_printf_i+0xce>
 8008084:	680e      	ldr	r6, [r1, #0]
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	2e00      	cmp	r6, #0
 800808a:	da03      	bge.n	8008094 <_printf_i+0xc8>
 800808c:	232d      	movs	r3, #45	; 0x2d
 800808e:	4276      	negs	r6, r6
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	485e      	ldr	r0, [pc, #376]	; (8008210 <_printf_i+0x244>)
 8008096:	230a      	movs	r3, #10
 8008098:	e019      	b.n	80080ce <_printf_i+0x102>
 800809a:	680e      	ldr	r6, [r1, #0]
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080a2:	bf18      	it	ne
 80080a4:	b236      	sxthne	r6, r6
 80080a6:	e7ef      	b.n	8008088 <_printf_i+0xbc>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	1d19      	adds	r1, r3, #4
 80080ae:	6029      	str	r1, [r5, #0]
 80080b0:	0601      	lsls	r1, r0, #24
 80080b2:	d501      	bpl.n	80080b8 <_printf_i+0xec>
 80080b4:	681e      	ldr	r6, [r3, #0]
 80080b6:	e002      	b.n	80080be <_printf_i+0xf2>
 80080b8:	0646      	lsls	r6, r0, #25
 80080ba:	d5fb      	bpl.n	80080b4 <_printf_i+0xe8>
 80080bc:	881e      	ldrh	r6, [r3, #0]
 80080be:	4854      	ldr	r0, [pc, #336]	; (8008210 <_printf_i+0x244>)
 80080c0:	2f6f      	cmp	r7, #111	; 0x6f
 80080c2:	bf0c      	ite	eq
 80080c4:	2308      	moveq	r3, #8
 80080c6:	230a      	movne	r3, #10
 80080c8:	2100      	movs	r1, #0
 80080ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ce:	6865      	ldr	r5, [r4, #4]
 80080d0:	60a5      	str	r5, [r4, #8]
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	bfa2      	ittt	ge
 80080d6:	6821      	ldrge	r1, [r4, #0]
 80080d8:	f021 0104 	bicge.w	r1, r1, #4
 80080dc:	6021      	strge	r1, [r4, #0]
 80080de:	b90e      	cbnz	r6, 80080e4 <_printf_i+0x118>
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	d04d      	beq.n	8008180 <_printf_i+0x1b4>
 80080e4:	4615      	mov	r5, r2
 80080e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ea:	fb03 6711 	mls	r7, r3, r1, r6
 80080ee:	5dc7      	ldrb	r7, [r0, r7]
 80080f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080f4:	4637      	mov	r7, r6
 80080f6:	42bb      	cmp	r3, r7
 80080f8:	460e      	mov	r6, r1
 80080fa:	d9f4      	bls.n	80080e6 <_printf_i+0x11a>
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d10b      	bne.n	8008118 <_printf_i+0x14c>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	07de      	lsls	r6, r3, #31
 8008104:	d508      	bpl.n	8008118 <_printf_i+0x14c>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	6861      	ldr	r1, [r4, #4]
 800810a:	4299      	cmp	r1, r3
 800810c:	bfde      	ittt	le
 800810e:	2330      	movle	r3, #48	; 0x30
 8008110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008114:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008118:	1b52      	subs	r2, r2, r5
 800811a:	6122      	str	r2, [r4, #16]
 800811c:	f8cd a000 	str.w	sl, [sp]
 8008120:	464b      	mov	r3, r9
 8008122:	aa03      	add	r2, sp, #12
 8008124:	4621      	mov	r1, r4
 8008126:	4640      	mov	r0, r8
 8008128:	f7ff fee2 	bl	8007ef0 <_printf_common>
 800812c:	3001      	adds	r0, #1
 800812e:	d14c      	bne.n	80081ca <_printf_i+0x1fe>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008134:	b004      	add	sp, #16
 8008136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813a:	4835      	ldr	r0, [pc, #212]	; (8008210 <_printf_i+0x244>)
 800813c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008140:	6829      	ldr	r1, [r5, #0]
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	f851 6b04 	ldr.w	r6, [r1], #4
 8008148:	6029      	str	r1, [r5, #0]
 800814a:	061d      	lsls	r5, r3, #24
 800814c:	d514      	bpl.n	8008178 <_printf_i+0x1ac>
 800814e:	07df      	lsls	r7, r3, #31
 8008150:	bf44      	itt	mi
 8008152:	f043 0320 	orrmi.w	r3, r3, #32
 8008156:	6023      	strmi	r3, [r4, #0]
 8008158:	b91e      	cbnz	r6, 8008162 <_printf_i+0x196>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f023 0320 	bic.w	r3, r3, #32
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	2310      	movs	r3, #16
 8008164:	e7b0      	b.n	80080c8 <_printf_i+0xfc>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	f043 0320 	orr.w	r3, r3, #32
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	2378      	movs	r3, #120	; 0x78
 8008170:	4828      	ldr	r0, [pc, #160]	; (8008214 <_printf_i+0x248>)
 8008172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008176:	e7e3      	b.n	8008140 <_printf_i+0x174>
 8008178:	0659      	lsls	r1, r3, #25
 800817a:	bf48      	it	mi
 800817c:	b2b6      	uxthmi	r6, r6
 800817e:	e7e6      	b.n	800814e <_printf_i+0x182>
 8008180:	4615      	mov	r5, r2
 8008182:	e7bb      	b.n	80080fc <_printf_i+0x130>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	6826      	ldr	r6, [r4, #0]
 8008188:	6961      	ldr	r1, [r4, #20]
 800818a:	1d18      	adds	r0, r3, #4
 800818c:	6028      	str	r0, [r5, #0]
 800818e:	0635      	lsls	r5, r6, #24
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	d501      	bpl.n	8008198 <_printf_i+0x1cc>
 8008194:	6019      	str	r1, [r3, #0]
 8008196:	e002      	b.n	800819e <_printf_i+0x1d2>
 8008198:	0670      	lsls	r0, r6, #25
 800819a:	d5fb      	bpl.n	8008194 <_printf_i+0x1c8>
 800819c:	8019      	strh	r1, [r3, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	4615      	mov	r5, r2
 80081a4:	e7ba      	b.n	800811c <_printf_i+0x150>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	602a      	str	r2, [r5, #0]
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	6862      	ldr	r2, [r4, #4]
 80081b0:	2100      	movs	r1, #0
 80081b2:	4628      	mov	r0, r5
 80081b4:	f7f8 f81c 	bl	80001f0 <memchr>
 80081b8:	b108      	cbz	r0, 80081be <_printf_i+0x1f2>
 80081ba:	1b40      	subs	r0, r0, r5
 80081bc:	6060      	str	r0, [r4, #4]
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	2300      	movs	r3, #0
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c8:	e7a8      	b.n	800811c <_printf_i+0x150>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d0ab      	beq.n	8008130 <_printf_i+0x164>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	079b      	lsls	r3, r3, #30
 80081dc:	d413      	bmi.n	8008206 <_printf_i+0x23a>
 80081de:	68e0      	ldr	r0, [r4, #12]
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	4298      	cmp	r0, r3
 80081e4:	bfb8      	it	lt
 80081e6:	4618      	movlt	r0, r3
 80081e8:	e7a4      	b.n	8008134 <_printf_i+0x168>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4632      	mov	r2, r6
 80081ee:	4649      	mov	r1, r9
 80081f0:	4640      	mov	r0, r8
 80081f2:	47d0      	blx	sl
 80081f4:	3001      	adds	r0, #1
 80081f6:	d09b      	beq.n	8008130 <_printf_i+0x164>
 80081f8:	3501      	adds	r5, #1
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	9903      	ldr	r1, [sp, #12]
 80081fe:	1a5b      	subs	r3, r3, r1
 8008200:	42ab      	cmp	r3, r5
 8008202:	dcf2      	bgt.n	80081ea <_printf_i+0x21e>
 8008204:	e7eb      	b.n	80081de <_printf_i+0x212>
 8008206:	2500      	movs	r5, #0
 8008208:	f104 0619 	add.w	r6, r4, #25
 800820c:	e7f5      	b.n	80081fa <_printf_i+0x22e>
 800820e:	bf00      	nop
 8008210:	08008ccd 	.word	0x08008ccd
 8008214:	08008cde 	.word	0x08008cde

08008218 <__swbuf_r>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	460e      	mov	r6, r1
 800821c:	4614      	mov	r4, r2
 800821e:	4605      	mov	r5, r0
 8008220:	b118      	cbz	r0, 800822a <__swbuf_r+0x12>
 8008222:	6983      	ldr	r3, [r0, #24]
 8008224:	b90b      	cbnz	r3, 800822a <__swbuf_r+0x12>
 8008226:	f000 f9d9 	bl	80085dc <__sinit>
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <__swbuf_r+0x98>)
 800822c:	429c      	cmp	r4, r3
 800822e:	d12b      	bne.n	8008288 <__swbuf_r+0x70>
 8008230:	686c      	ldr	r4, [r5, #4]
 8008232:	69a3      	ldr	r3, [r4, #24]
 8008234:	60a3      	str	r3, [r4, #8]
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	071a      	lsls	r2, r3, #28
 800823a:	d52f      	bpl.n	800829c <__swbuf_r+0x84>
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	b36b      	cbz	r3, 800829c <__swbuf_r+0x84>
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	6820      	ldr	r0, [r4, #0]
 8008244:	1ac0      	subs	r0, r0, r3
 8008246:	6963      	ldr	r3, [r4, #20]
 8008248:	b2f6      	uxtb	r6, r6
 800824a:	4283      	cmp	r3, r0
 800824c:	4637      	mov	r7, r6
 800824e:	dc04      	bgt.n	800825a <__swbuf_r+0x42>
 8008250:	4621      	mov	r1, r4
 8008252:	4628      	mov	r0, r5
 8008254:	f000 f92e 	bl	80084b4 <_fflush_r>
 8008258:	bb30      	cbnz	r0, 80082a8 <__swbuf_r+0x90>
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	3b01      	subs	r3, #1
 800825e:	60a3      	str	r3, [r4, #8]
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	6022      	str	r2, [r4, #0]
 8008266:	701e      	strb	r6, [r3, #0]
 8008268:	6963      	ldr	r3, [r4, #20]
 800826a:	3001      	adds	r0, #1
 800826c:	4283      	cmp	r3, r0
 800826e:	d004      	beq.n	800827a <__swbuf_r+0x62>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	07db      	lsls	r3, r3, #31
 8008274:	d506      	bpl.n	8008284 <__swbuf_r+0x6c>
 8008276:	2e0a      	cmp	r6, #10
 8008278:	d104      	bne.n	8008284 <__swbuf_r+0x6c>
 800827a:	4621      	mov	r1, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 f919 	bl	80084b4 <_fflush_r>
 8008282:	b988      	cbnz	r0, 80082a8 <__swbuf_r+0x90>
 8008284:	4638      	mov	r0, r7
 8008286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <__swbuf_r+0x9c>)
 800828a:	429c      	cmp	r4, r3
 800828c:	d101      	bne.n	8008292 <__swbuf_r+0x7a>
 800828e:	68ac      	ldr	r4, [r5, #8]
 8008290:	e7cf      	b.n	8008232 <__swbuf_r+0x1a>
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <__swbuf_r+0xa0>)
 8008294:	429c      	cmp	r4, r3
 8008296:	bf08      	it	eq
 8008298:	68ec      	ldreq	r4, [r5, #12]
 800829a:	e7ca      	b.n	8008232 <__swbuf_r+0x1a>
 800829c:	4621      	mov	r1, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f80c 	bl	80082bc <__swsetup_r>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d0cb      	beq.n	8008240 <__swbuf_r+0x28>
 80082a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80082ac:	e7ea      	b.n	8008284 <__swbuf_r+0x6c>
 80082ae:	bf00      	nop
 80082b0:	08008d10 	.word	0x08008d10
 80082b4:	08008d30 	.word	0x08008d30
 80082b8:	08008cf0 	.word	0x08008cf0

080082bc <__swsetup_r>:
 80082bc:	4b32      	ldr	r3, [pc, #200]	; (8008388 <__swsetup_r+0xcc>)
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	4606      	mov	r6, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	b125      	cbz	r5, 80082d2 <__swsetup_r+0x16>
 80082c8:	69ab      	ldr	r3, [r5, #24]
 80082ca:	b913      	cbnz	r3, 80082d2 <__swsetup_r+0x16>
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 f985 	bl	80085dc <__sinit>
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <__swsetup_r+0xd0>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d10f      	bne.n	80082f8 <__swsetup_r+0x3c>
 80082d8:	686c      	ldr	r4, [r5, #4]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e0:	0719      	lsls	r1, r3, #28
 80082e2:	d42c      	bmi.n	800833e <__swsetup_r+0x82>
 80082e4:	06dd      	lsls	r5, r3, #27
 80082e6:	d411      	bmi.n	800830c <__swsetup_r+0x50>
 80082e8:	2309      	movs	r3, #9
 80082ea:	6033      	str	r3, [r6, #0]
 80082ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f6:	e03e      	b.n	8008376 <__swsetup_r+0xba>
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <__swsetup_r+0xd4>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d101      	bne.n	8008302 <__swsetup_r+0x46>
 80082fe:	68ac      	ldr	r4, [r5, #8]
 8008300:	e7eb      	b.n	80082da <__swsetup_r+0x1e>
 8008302:	4b24      	ldr	r3, [pc, #144]	; (8008394 <__swsetup_r+0xd8>)
 8008304:	429c      	cmp	r4, r3
 8008306:	bf08      	it	eq
 8008308:	68ec      	ldreq	r4, [r5, #12]
 800830a:	e7e6      	b.n	80082da <__swsetup_r+0x1e>
 800830c:	0758      	lsls	r0, r3, #29
 800830e:	d512      	bpl.n	8008336 <__swsetup_r+0x7a>
 8008310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008312:	b141      	cbz	r1, 8008326 <__swsetup_r+0x6a>
 8008314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008318:	4299      	cmp	r1, r3
 800831a:	d002      	beq.n	8008322 <__swsetup_r+0x66>
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff f969 	bl	80075f4 <_free_r>
 8008322:	2300      	movs	r3, #0
 8008324:	6363      	str	r3, [r4, #52]	; 0x34
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	2300      	movs	r3, #0
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f043 0308 	orr.w	r3, r3, #8
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	b94b      	cbnz	r3, 8008356 <__swsetup_r+0x9a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834c:	d003      	beq.n	8008356 <__swsetup_r+0x9a>
 800834e:	4621      	mov	r1, r4
 8008350:	4630      	mov	r0, r6
 8008352:	f000 fa09 	bl	8008768 <__smakebuf_r>
 8008356:	89a0      	ldrh	r0, [r4, #12]
 8008358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800835c:	f010 0301 	ands.w	r3, r0, #1
 8008360:	d00a      	beq.n	8008378 <__swsetup_r+0xbc>
 8008362:	2300      	movs	r3, #0
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	425b      	negs	r3, r3
 800836a:	61a3      	str	r3, [r4, #24]
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	b943      	cbnz	r3, 8008382 <__swsetup_r+0xc6>
 8008370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008374:	d1ba      	bne.n	80082ec <__swsetup_r+0x30>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	0781      	lsls	r1, r0, #30
 800837a:	bf58      	it	pl
 800837c:	6963      	ldrpl	r3, [r4, #20]
 800837e:	60a3      	str	r3, [r4, #8]
 8008380:	e7f4      	b.n	800836c <__swsetup_r+0xb0>
 8008382:	2000      	movs	r0, #0
 8008384:	e7f7      	b.n	8008376 <__swsetup_r+0xba>
 8008386:	bf00      	nop
 8008388:	2000013c 	.word	0x2000013c
 800838c:	08008d10 	.word	0x08008d10
 8008390:	08008d30 	.word	0x08008d30
 8008394:	08008cf0 	.word	0x08008cf0

08008398 <abort>:
 8008398:	b508      	push	{r3, lr}
 800839a:	2006      	movs	r0, #6
 800839c:	f000 faa4 	bl	80088e8 <raise>
 80083a0:	2001      	movs	r0, #1
 80083a2:	f7f8 fc49 	bl	8000c38 <_exit>
	...

080083a8 <__sflush_r>:
 80083a8:	898a      	ldrh	r2, [r1, #12]
 80083aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ae:	4605      	mov	r5, r0
 80083b0:	0710      	lsls	r0, r2, #28
 80083b2:	460c      	mov	r4, r1
 80083b4:	d458      	bmi.n	8008468 <__sflush_r+0xc0>
 80083b6:	684b      	ldr	r3, [r1, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dc05      	bgt.n	80083c8 <__sflush_r+0x20>
 80083bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dc02      	bgt.n	80083c8 <__sflush_r+0x20>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	d0f9      	beq.n	80083c2 <__sflush_r+0x1a>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083d4:	682f      	ldr	r7, [r5, #0]
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	d032      	beq.n	8008440 <__sflush_r+0x98>
 80083da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	075a      	lsls	r2, r3, #29
 80083e0:	d505      	bpl.n	80083ee <__sflush_r+0x46>
 80083e2:	6863      	ldr	r3, [r4, #4]
 80083e4:	1ac0      	subs	r0, r0, r3
 80083e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083e8:	b10b      	cbz	r3, 80083ee <__sflush_r+0x46>
 80083ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083ec:	1ac0      	subs	r0, r0, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	4602      	mov	r2, r0
 80083f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083f4:	6a21      	ldr	r1, [r4, #32]
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b0      	blx	r6
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	d106      	bne.n	800840e <__sflush_r+0x66>
 8008400:	6829      	ldr	r1, [r5, #0]
 8008402:	291d      	cmp	r1, #29
 8008404:	d82c      	bhi.n	8008460 <__sflush_r+0xb8>
 8008406:	4a2a      	ldr	r2, [pc, #168]	; (80084b0 <__sflush_r+0x108>)
 8008408:	40ca      	lsrs	r2, r1
 800840a:	07d6      	lsls	r6, r2, #31
 800840c:	d528      	bpl.n	8008460 <__sflush_r+0xb8>
 800840e:	2200      	movs	r2, #0
 8008410:	6062      	str	r2, [r4, #4]
 8008412:	04d9      	lsls	r1, r3, #19
 8008414:	6922      	ldr	r2, [r4, #16]
 8008416:	6022      	str	r2, [r4, #0]
 8008418:	d504      	bpl.n	8008424 <__sflush_r+0x7c>
 800841a:	1c42      	adds	r2, r0, #1
 800841c:	d101      	bne.n	8008422 <__sflush_r+0x7a>
 800841e:	682b      	ldr	r3, [r5, #0]
 8008420:	b903      	cbnz	r3, 8008424 <__sflush_r+0x7c>
 8008422:	6560      	str	r0, [r4, #84]	; 0x54
 8008424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008426:	602f      	str	r7, [r5, #0]
 8008428:	2900      	cmp	r1, #0
 800842a:	d0ca      	beq.n	80083c2 <__sflush_r+0x1a>
 800842c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008430:	4299      	cmp	r1, r3
 8008432:	d002      	beq.n	800843a <__sflush_r+0x92>
 8008434:	4628      	mov	r0, r5
 8008436:	f7ff f8dd 	bl	80075f4 <_free_r>
 800843a:	2000      	movs	r0, #0
 800843c:	6360      	str	r0, [r4, #52]	; 0x34
 800843e:	e7c1      	b.n	80083c4 <__sflush_r+0x1c>
 8008440:	6a21      	ldr	r1, [r4, #32]
 8008442:	2301      	movs	r3, #1
 8008444:	4628      	mov	r0, r5
 8008446:	47b0      	blx	r6
 8008448:	1c41      	adds	r1, r0, #1
 800844a:	d1c7      	bne.n	80083dc <__sflush_r+0x34>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0c4      	beq.n	80083dc <__sflush_r+0x34>
 8008452:	2b1d      	cmp	r3, #29
 8008454:	d001      	beq.n	800845a <__sflush_r+0xb2>
 8008456:	2b16      	cmp	r3, #22
 8008458:	d101      	bne.n	800845e <__sflush_r+0xb6>
 800845a:	602f      	str	r7, [r5, #0]
 800845c:	e7b1      	b.n	80083c2 <__sflush_r+0x1a>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	e7ad      	b.n	80083c4 <__sflush_r+0x1c>
 8008468:	690f      	ldr	r7, [r1, #16]
 800846a:	2f00      	cmp	r7, #0
 800846c:	d0a9      	beq.n	80083c2 <__sflush_r+0x1a>
 800846e:	0793      	lsls	r3, r2, #30
 8008470:	680e      	ldr	r6, [r1, #0]
 8008472:	bf08      	it	eq
 8008474:	694b      	ldreq	r3, [r1, #20]
 8008476:	600f      	str	r7, [r1, #0]
 8008478:	bf18      	it	ne
 800847a:	2300      	movne	r3, #0
 800847c:	eba6 0807 	sub.w	r8, r6, r7
 8008480:	608b      	str	r3, [r1, #8]
 8008482:	f1b8 0f00 	cmp.w	r8, #0
 8008486:	dd9c      	ble.n	80083c2 <__sflush_r+0x1a>
 8008488:	6a21      	ldr	r1, [r4, #32]
 800848a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800848c:	4643      	mov	r3, r8
 800848e:	463a      	mov	r2, r7
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	2800      	cmp	r0, #0
 8008496:	dc06      	bgt.n	80084a6 <__sflush_r+0xfe>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a4:	e78e      	b.n	80083c4 <__sflush_r+0x1c>
 80084a6:	4407      	add	r7, r0
 80084a8:	eba8 0800 	sub.w	r8, r8, r0
 80084ac:	e7e9      	b.n	8008482 <__sflush_r+0xda>
 80084ae:	bf00      	nop
 80084b0:	20400001 	.word	0x20400001

080084b4 <_fflush_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	690b      	ldr	r3, [r1, #16]
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	b913      	cbnz	r3, 80084c4 <_fflush_r+0x10>
 80084be:	2500      	movs	r5, #0
 80084c0:	4628      	mov	r0, r5
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	b118      	cbz	r0, 80084ce <_fflush_r+0x1a>
 80084c6:	6983      	ldr	r3, [r0, #24]
 80084c8:	b90b      	cbnz	r3, 80084ce <_fflush_r+0x1a>
 80084ca:	f000 f887 	bl	80085dc <__sinit>
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <_fflush_r+0x6c>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	d11b      	bne.n	800850c <_fflush_r+0x58>
 80084d4:	686c      	ldr	r4, [r5, #4]
 80084d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0ef      	beq.n	80084be <_fflush_r+0xa>
 80084de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084e0:	07d0      	lsls	r0, r2, #31
 80084e2:	d404      	bmi.n	80084ee <_fflush_r+0x3a>
 80084e4:	0599      	lsls	r1, r3, #22
 80084e6:	d402      	bmi.n	80084ee <_fflush_r+0x3a>
 80084e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ea:	f000 f915 	bl	8008718 <__retarget_lock_acquire_recursive>
 80084ee:	4628      	mov	r0, r5
 80084f0:	4621      	mov	r1, r4
 80084f2:	f7ff ff59 	bl	80083a8 <__sflush_r>
 80084f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f8:	07da      	lsls	r2, r3, #31
 80084fa:	4605      	mov	r5, r0
 80084fc:	d4e0      	bmi.n	80084c0 <_fflush_r+0xc>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	059b      	lsls	r3, r3, #22
 8008502:	d4dd      	bmi.n	80084c0 <_fflush_r+0xc>
 8008504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008506:	f000 f908 	bl	800871a <__retarget_lock_release_recursive>
 800850a:	e7d9      	b.n	80084c0 <_fflush_r+0xc>
 800850c:	4b05      	ldr	r3, [pc, #20]	; (8008524 <_fflush_r+0x70>)
 800850e:	429c      	cmp	r4, r3
 8008510:	d101      	bne.n	8008516 <_fflush_r+0x62>
 8008512:	68ac      	ldr	r4, [r5, #8]
 8008514:	e7df      	b.n	80084d6 <_fflush_r+0x22>
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <_fflush_r+0x74>)
 8008518:	429c      	cmp	r4, r3
 800851a:	bf08      	it	eq
 800851c:	68ec      	ldreq	r4, [r5, #12]
 800851e:	e7da      	b.n	80084d6 <_fflush_r+0x22>
 8008520:	08008d10 	.word	0x08008d10
 8008524:	08008d30 	.word	0x08008d30
 8008528:	08008cf0 	.word	0x08008cf0

0800852c <std>:
 800852c:	2300      	movs	r3, #0
 800852e:	b510      	push	{r4, lr}
 8008530:	4604      	mov	r4, r0
 8008532:	e9c0 3300 	strd	r3, r3, [r0]
 8008536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800853a:	6083      	str	r3, [r0, #8]
 800853c:	8181      	strh	r1, [r0, #12]
 800853e:	6643      	str	r3, [r0, #100]	; 0x64
 8008540:	81c2      	strh	r2, [r0, #14]
 8008542:	6183      	str	r3, [r0, #24]
 8008544:	4619      	mov	r1, r3
 8008546:	2208      	movs	r2, #8
 8008548:	305c      	adds	r0, #92	; 0x5c
 800854a:	f7ff f84b 	bl	80075e4 <memset>
 800854e:	4b05      	ldr	r3, [pc, #20]	; (8008564 <std+0x38>)
 8008550:	6263      	str	r3, [r4, #36]	; 0x24
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <std+0x3c>)
 8008554:	62a3      	str	r3, [r4, #40]	; 0x28
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <std+0x40>)
 8008558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <std+0x44>)
 800855c:	6224      	str	r4, [r4, #32]
 800855e:	6323      	str	r3, [r4, #48]	; 0x30
 8008560:	bd10      	pop	{r4, pc}
 8008562:	bf00      	nop
 8008564:	08008921 	.word	0x08008921
 8008568:	08008943 	.word	0x08008943
 800856c:	0800897b 	.word	0x0800897b
 8008570:	0800899f 	.word	0x0800899f

08008574 <_cleanup_r>:
 8008574:	4901      	ldr	r1, [pc, #4]	; (800857c <_cleanup_r+0x8>)
 8008576:	f000 b8af 	b.w	80086d8 <_fwalk_reent>
 800857a:	bf00      	nop
 800857c:	080084b5 	.word	0x080084b5

08008580 <__sfmoreglue>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	2268      	movs	r2, #104	; 0x68
 8008584:	1e4d      	subs	r5, r1, #1
 8008586:	4355      	muls	r5, r2
 8008588:	460e      	mov	r6, r1
 800858a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800858e:	f7ff f89d 	bl	80076cc <_malloc_r>
 8008592:	4604      	mov	r4, r0
 8008594:	b140      	cbz	r0, 80085a8 <__sfmoreglue+0x28>
 8008596:	2100      	movs	r1, #0
 8008598:	e9c0 1600 	strd	r1, r6, [r0]
 800859c:	300c      	adds	r0, #12
 800859e:	60a0      	str	r0, [r4, #8]
 80085a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085a4:	f7ff f81e 	bl	80075e4 <memset>
 80085a8:	4620      	mov	r0, r4
 80085aa:	bd70      	pop	{r4, r5, r6, pc}

080085ac <__sfp_lock_acquire>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__sfp_lock_acquire+0x8>)
 80085ae:	f000 b8b3 	b.w	8008718 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	20001eb1 	.word	0x20001eb1

080085b8 <__sfp_lock_release>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__sfp_lock_release+0x8>)
 80085ba:	f000 b8ae 	b.w	800871a <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	20001eb1 	.word	0x20001eb1

080085c4 <__sinit_lock_acquire>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__sinit_lock_acquire+0x8>)
 80085c6:	f000 b8a7 	b.w	8008718 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	20001eb2 	.word	0x20001eb2

080085d0 <__sinit_lock_release>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__sinit_lock_release+0x8>)
 80085d2:	f000 b8a2 	b.w	800871a <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	20001eb2 	.word	0x20001eb2

080085dc <__sinit>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	f7ff fff0 	bl	80085c4 <__sinit_lock_acquire>
 80085e4:	69a3      	ldr	r3, [r4, #24]
 80085e6:	b11b      	cbz	r3, 80085f0 <__sinit+0x14>
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	f7ff bff0 	b.w	80085d0 <__sinit_lock_release>
 80085f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085f4:	6523      	str	r3, [r4, #80]	; 0x50
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <__sinit+0x68>)
 80085f8:	4a13      	ldr	r2, [pc, #76]	; (8008648 <__sinit+0x6c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80085fe:	42a3      	cmp	r3, r4
 8008600:	bf04      	itt	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	61a3      	streq	r3, [r4, #24]
 8008606:	4620      	mov	r0, r4
 8008608:	f000 f820 	bl	800864c <__sfp>
 800860c:	6060      	str	r0, [r4, #4]
 800860e:	4620      	mov	r0, r4
 8008610:	f000 f81c 	bl	800864c <__sfp>
 8008614:	60a0      	str	r0, [r4, #8]
 8008616:	4620      	mov	r0, r4
 8008618:	f000 f818 	bl	800864c <__sfp>
 800861c:	2200      	movs	r2, #0
 800861e:	60e0      	str	r0, [r4, #12]
 8008620:	2104      	movs	r1, #4
 8008622:	6860      	ldr	r0, [r4, #4]
 8008624:	f7ff ff82 	bl	800852c <std>
 8008628:	68a0      	ldr	r0, [r4, #8]
 800862a:	2201      	movs	r2, #1
 800862c:	2109      	movs	r1, #9
 800862e:	f7ff ff7d 	bl	800852c <std>
 8008632:	68e0      	ldr	r0, [r4, #12]
 8008634:	2202      	movs	r2, #2
 8008636:	2112      	movs	r1, #18
 8008638:	f7ff ff78 	bl	800852c <std>
 800863c:	2301      	movs	r3, #1
 800863e:	61a3      	str	r3, [r4, #24]
 8008640:	e7d2      	b.n	80085e8 <__sinit+0xc>
 8008642:	bf00      	nop
 8008644:	08008c08 	.word	0x08008c08
 8008648:	08008575 	.word	0x08008575

0800864c <__sfp>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	4607      	mov	r7, r0
 8008650:	f7ff ffac 	bl	80085ac <__sfp_lock_acquire>
 8008654:	4b1e      	ldr	r3, [pc, #120]	; (80086d0 <__sfp+0x84>)
 8008656:	681e      	ldr	r6, [r3, #0]
 8008658:	69b3      	ldr	r3, [r6, #24]
 800865a:	b913      	cbnz	r3, 8008662 <__sfp+0x16>
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff ffbd 	bl	80085dc <__sinit>
 8008662:	3648      	adds	r6, #72	; 0x48
 8008664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008668:	3b01      	subs	r3, #1
 800866a:	d503      	bpl.n	8008674 <__sfp+0x28>
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	b30b      	cbz	r3, 80086b4 <__sfp+0x68>
 8008670:	6836      	ldr	r6, [r6, #0]
 8008672:	e7f7      	b.n	8008664 <__sfp+0x18>
 8008674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008678:	b9d5      	cbnz	r5, 80086b0 <__sfp+0x64>
 800867a:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <__sfp+0x88>)
 800867c:	60e3      	str	r3, [r4, #12]
 800867e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008682:	6665      	str	r5, [r4, #100]	; 0x64
 8008684:	f000 f847 	bl	8008716 <__retarget_lock_init_recursive>
 8008688:	f7ff ff96 	bl	80085b8 <__sfp_lock_release>
 800868c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008694:	6025      	str	r5, [r4, #0]
 8008696:	61a5      	str	r5, [r4, #24]
 8008698:	2208      	movs	r2, #8
 800869a:	4629      	mov	r1, r5
 800869c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086a0:	f7fe ffa0 	bl	80075e4 <memset>
 80086a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086ac:	4620      	mov	r0, r4
 80086ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b0:	3468      	adds	r4, #104	; 0x68
 80086b2:	e7d9      	b.n	8008668 <__sfp+0x1c>
 80086b4:	2104      	movs	r1, #4
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7ff ff62 	bl	8008580 <__sfmoreglue>
 80086bc:	4604      	mov	r4, r0
 80086be:	6030      	str	r0, [r6, #0]
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1d5      	bne.n	8008670 <__sfp+0x24>
 80086c4:	f7ff ff78 	bl	80085b8 <__sfp_lock_release>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	e7ee      	b.n	80086ac <__sfp+0x60>
 80086ce:	bf00      	nop
 80086d0:	08008c08 	.word	0x08008c08
 80086d4:	ffff0001 	.word	0xffff0001

080086d8 <_fwalk_reent>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	4606      	mov	r6, r0
 80086de:	4688      	mov	r8, r1
 80086e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086e4:	2700      	movs	r7, #0
 80086e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ea:	f1b9 0901 	subs.w	r9, r9, #1
 80086ee:	d505      	bpl.n	80086fc <_fwalk_reent+0x24>
 80086f0:	6824      	ldr	r4, [r4, #0]
 80086f2:	2c00      	cmp	r4, #0
 80086f4:	d1f7      	bne.n	80086e6 <_fwalk_reent+0xe>
 80086f6:	4638      	mov	r0, r7
 80086f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fc:	89ab      	ldrh	r3, [r5, #12]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d907      	bls.n	8008712 <_fwalk_reent+0x3a>
 8008702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008706:	3301      	adds	r3, #1
 8008708:	d003      	beq.n	8008712 <_fwalk_reent+0x3a>
 800870a:	4629      	mov	r1, r5
 800870c:	4630      	mov	r0, r6
 800870e:	47c0      	blx	r8
 8008710:	4307      	orrs	r7, r0
 8008712:	3568      	adds	r5, #104	; 0x68
 8008714:	e7e9      	b.n	80086ea <_fwalk_reent+0x12>

08008716 <__retarget_lock_init_recursive>:
 8008716:	4770      	bx	lr

08008718 <__retarget_lock_acquire_recursive>:
 8008718:	4770      	bx	lr

0800871a <__retarget_lock_release_recursive>:
 800871a:	4770      	bx	lr

0800871c <__swhatbuf_r>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	460e      	mov	r6, r1
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	2900      	cmp	r1, #0
 8008726:	b096      	sub	sp, #88	; 0x58
 8008728:	4614      	mov	r4, r2
 800872a:	461d      	mov	r5, r3
 800872c:	da08      	bge.n	8008740 <__swhatbuf_r+0x24>
 800872e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	061a      	lsls	r2, r3, #24
 8008738:	d410      	bmi.n	800875c <__swhatbuf_r+0x40>
 800873a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873e:	e00e      	b.n	800875e <__swhatbuf_r+0x42>
 8008740:	466a      	mov	r2, sp
 8008742:	f000 f953 	bl	80089ec <_fstat_r>
 8008746:	2800      	cmp	r0, #0
 8008748:	dbf1      	blt.n	800872e <__swhatbuf_r+0x12>
 800874a:	9a01      	ldr	r2, [sp, #4]
 800874c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008754:	425a      	negs	r2, r3
 8008756:	415a      	adcs	r2, r3
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	e7ee      	b.n	800873a <__swhatbuf_r+0x1e>
 800875c:	2340      	movs	r3, #64	; 0x40
 800875e:	2000      	movs	r0, #0
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	b016      	add	sp, #88	; 0x58
 8008764:	bd70      	pop	{r4, r5, r6, pc}
	...

08008768 <__smakebuf_r>:
 8008768:	898b      	ldrh	r3, [r1, #12]
 800876a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800876c:	079d      	lsls	r5, r3, #30
 800876e:	4606      	mov	r6, r0
 8008770:	460c      	mov	r4, r1
 8008772:	d507      	bpl.n	8008784 <__smakebuf_r+0x1c>
 8008774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	2301      	movs	r3, #1
 800877e:	6163      	str	r3, [r4, #20]
 8008780:	b002      	add	sp, #8
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	ab01      	add	r3, sp, #4
 8008786:	466a      	mov	r2, sp
 8008788:	f7ff ffc8 	bl	800871c <__swhatbuf_r>
 800878c:	9900      	ldr	r1, [sp, #0]
 800878e:	4605      	mov	r5, r0
 8008790:	4630      	mov	r0, r6
 8008792:	f7fe ff9b 	bl	80076cc <_malloc_r>
 8008796:	b948      	cbnz	r0, 80087ac <__smakebuf_r+0x44>
 8008798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d4ef      	bmi.n	8008780 <__smakebuf_r+0x18>
 80087a0:	f023 0303 	bic.w	r3, r3, #3
 80087a4:	f043 0302 	orr.w	r3, r3, #2
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	e7e3      	b.n	8008774 <__smakebuf_r+0xc>
 80087ac:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <__smakebuf_r+0x7c>)
 80087ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	6020      	str	r0, [r4, #0]
 80087b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	9b00      	ldr	r3, [sp, #0]
 80087bc:	6163      	str	r3, [r4, #20]
 80087be:	9b01      	ldr	r3, [sp, #4]
 80087c0:	6120      	str	r0, [r4, #16]
 80087c2:	b15b      	cbz	r3, 80087dc <__smakebuf_r+0x74>
 80087c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 f921 	bl	8008a10 <_isatty_r>
 80087ce:	b128      	cbz	r0, 80087dc <__smakebuf_r+0x74>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	89a0      	ldrh	r0, [r4, #12]
 80087de:	4305      	orrs	r5, r0
 80087e0:	81a5      	strh	r5, [r4, #12]
 80087e2:	e7cd      	b.n	8008780 <__smakebuf_r+0x18>
 80087e4:	08008575 	.word	0x08008575

080087e8 <memcpy>:
 80087e8:	440a      	add	r2, r1
 80087ea:	4291      	cmp	r1, r2
 80087ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087f0:	d100      	bne.n	80087f4 <memcpy+0xc>
 80087f2:	4770      	bx	lr
 80087f4:	b510      	push	{r4, lr}
 80087f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087fe:	4291      	cmp	r1, r2
 8008800:	d1f9      	bne.n	80087f6 <memcpy+0xe>
 8008802:	bd10      	pop	{r4, pc}

08008804 <memmove>:
 8008804:	4288      	cmp	r0, r1
 8008806:	b510      	push	{r4, lr}
 8008808:	eb01 0402 	add.w	r4, r1, r2
 800880c:	d902      	bls.n	8008814 <memmove+0x10>
 800880e:	4284      	cmp	r4, r0
 8008810:	4623      	mov	r3, r4
 8008812:	d807      	bhi.n	8008824 <memmove+0x20>
 8008814:	1e43      	subs	r3, r0, #1
 8008816:	42a1      	cmp	r1, r4
 8008818:	d008      	beq.n	800882c <memmove+0x28>
 800881a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800881e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008822:	e7f8      	b.n	8008816 <memmove+0x12>
 8008824:	4402      	add	r2, r0
 8008826:	4601      	mov	r1, r0
 8008828:	428a      	cmp	r2, r1
 800882a:	d100      	bne.n	800882e <memmove+0x2a>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008836:	e7f7      	b.n	8008828 <memmove+0x24>

08008838 <_realloc_r>:
 8008838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	4680      	mov	r8, r0
 800883e:	4614      	mov	r4, r2
 8008840:	460e      	mov	r6, r1
 8008842:	b921      	cbnz	r1, 800884e <_realloc_r+0x16>
 8008844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	4611      	mov	r1, r2
 800884a:	f7fe bf3f 	b.w	80076cc <_malloc_r>
 800884e:	b92a      	cbnz	r2, 800885c <_realloc_r+0x24>
 8008850:	f7fe fed0 	bl	80075f4 <_free_r>
 8008854:	4625      	mov	r5, r4
 8008856:	4628      	mov	r0, r5
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	f000 f8fa 	bl	8008a54 <_malloc_usable_size_r>
 8008860:	4284      	cmp	r4, r0
 8008862:	4607      	mov	r7, r0
 8008864:	d802      	bhi.n	800886c <_realloc_r+0x34>
 8008866:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800886a:	d812      	bhi.n	8008892 <_realloc_r+0x5a>
 800886c:	4621      	mov	r1, r4
 800886e:	4640      	mov	r0, r8
 8008870:	f7fe ff2c 	bl	80076cc <_malloc_r>
 8008874:	4605      	mov	r5, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d0ed      	beq.n	8008856 <_realloc_r+0x1e>
 800887a:	42bc      	cmp	r4, r7
 800887c:	4622      	mov	r2, r4
 800887e:	4631      	mov	r1, r6
 8008880:	bf28      	it	cs
 8008882:	463a      	movcs	r2, r7
 8008884:	f7ff ffb0 	bl	80087e8 <memcpy>
 8008888:	4631      	mov	r1, r6
 800888a:	4640      	mov	r0, r8
 800888c:	f7fe feb2 	bl	80075f4 <_free_r>
 8008890:	e7e1      	b.n	8008856 <_realloc_r+0x1e>
 8008892:	4635      	mov	r5, r6
 8008894:	e7df      	b.n	8008856 <_realloc_r+0x1e>

08008896 <_raise_r>:
 8008896:	291f      	cmp	r1, #31
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	460d      	mov	r5, r1
 800889e:	d904      	bls.n	80088aa <_raise_r+0x14>
 80088a0:	2316      	movs	r3, #22
 80088a2:	6003      	str	r3, [r0, #0]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ac:	b112      	cbz	r2, 80088b4 <_raise_r+0x1e>
 80088ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b2:	b94b      	cbnz	r3, 80088c8 <_raise_r+0x32>
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 f831 	bl	800891c <_getpid_r>
 80088ba:	462a      	mov	r2, r5
 80088bc:	4601      	mov	r1, r0
 80088be:	4620      	mov	r0, r4
 80088c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c4:	f000 b818 	b.w	80088f8 <_kill_r>
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d00a      	beq.n	80088e2 <_raise_r+0x4c>
 80088cc:	1c59      	adds	r1, r3, #1
 80088ce:	d103      	bne.n	80088d8 <_raise_r+0x42>
 80088d0:	2316      	movs	r3, #22
 80088d2:	6003      	str	r3, [r0, #0]
 80088d4:	2001      	movs	r0, #1
 80088d6:	e7e7      	b.n	80088a8 <_raise_r+0x12>
 80088d8:	2400      	movs	r4, #0
 80088da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088de:	4628      	mov	r0, r5
 80088e0:	4798      	blx	r3
 80088e2:	2000      	movs	r0, #0
 80088e4:	e7e0      	b.n	80088a8 <_raise_r+0x12>
	...

080088e8 <raise>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <raise+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff bfd2 	b.w	8008896 <_raise_r>
 80088f2:	bf00      	nop
 80088f4:	2000013c 	.word	0x2000013c

080088f8 <_kill_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_kill_r+0x20>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	f7f8 f987 	bl	8000c18 <_kill>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d102      	bne.n	8008914 <_kill_r+0x1c>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	b103      	cbz	r3, 8008914 <_kill_r+0x1c>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	20001eac 	.word	0x20001eac

0800891c <_getpid_r>:
 800891c:	f7f8 b974 	b.w	8000c08 <_getpid>

08008920 <__sread>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008928:	f000 f89c 	bl	8008a64 <_read_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	bfab      	itete	ge
 8008930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008932:	89a3      	ldrhlt	r3, [r4, #12]
 8008934:	181b      	addge	r3, r3, r0
 8008936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800893a:	bfac      	ite	ge
 800893c:	6563      	strge	r3, [r4, #84]	; 0x54
 800893e:	81a3      	strhlt	r3, [r4, #12]
 8008940:	bd10      	pop	{r4, pc}

08008942 <__swrite>:
 8008942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008946:	461f      	mov	r7, r3
 8008948:	898b      	ldrh	r3, [r1, #12]
 800894a:	05db      	lsls	r3, r3, #23
 800894c:	4605      	mov	r5, r0
 800894e:	460c      	mov	r4, r1
 8008950:	4616      	mov	r6, r2
 8008952:	d505      	bpl.n	8008960 <__swrite+0x1e>
 8008954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008958:	2302      	movs	r3, #2
 800895a:	2200      	movs	r2, #0
 800895c:	f000 f868 	bl	8008a30 <_lseek_r>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	4632      	mov	r2, r6
 800896e:	463b      	mov	r3, r7
 8008970:	4628      	mov	r0, r5
 8008972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008976:	f000 b817 	b.w	80089a8 <_write_r>

0800897a <__sseek>:
 800897a:	b510      	push	{r4, lr}
 800897c:	460c      	mov	r4, r1
 800897e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008982:	f000 f855 	bl	8008a30 <_lseek_r>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	bf15      	itete	ne
 800898c:	6560      	strne	r0, [r4, #84]	; 0x54
 800898e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008996:	81a3      	strheq	r3, [r4, #12]
 8008998:	bf18      	it	ne
 800899a:	81a3      	strhne	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__sclose>:
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	f000 b813 	b.w	80089cc <_close_r>
	...

080089a8 <_write_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d07      	ldr	r5, [pc, #28]	; (80089c8 <_write_r+0x20>)
 80089ac:	4604      	mov	r4, r0
 80089ae:	4608      	mov	r0, r1
 80089b0:	4611      	mov	r1, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f7f8 f965 	bl	8000c86 <_write>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_write_r+0x1e>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_write_r+0x1e>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20001eac 	.word	0x20001eac

080089cc <_close_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d06      	ldr	r5, [pc, #24]	; (80089e8 <_close_r+0x1c>)
 80089d0:	2300      	movs	r3, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	f7f8 f971 	bl	8000cbe <_close>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_close_r+0x1a>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_close_r+0x1a>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	20001eac 	.word	0x20001eac

080089ec <_fstat_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	; (8008a0c <_fstat_r+0x20>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	f7f8 f96c 	bl	8000cd6 <_fstat>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d102      	bne.n	8008a08 <_fstat_r+0x1c>
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	b103      	cbz	r3, 8008a08 <_fstat_r+0x1c>
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	bd38      	pop	{r3, r4, r5, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20001eac 	.word	0x20001eac

08008a10 <_isatty_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d06      	ldr	r5, [pc, #24]	; (8008a2c <_isatty_r+0x1c>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f8 f96b 	bl	8000cf6 <_isatty>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_isatty_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_isatty_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20001eac 	.word	0x20001eac

08008a30 <_lseek_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_lseek_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 f964 	bl	8000d0c <_lseek>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_lseek_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_lseek_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20001eac 	.word	0x20001eac

08008a54 <_malloc_usable_size_r>:
 8008a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a58:	1f18      	subs	r0, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbc      	itt	lt
 8008a5e:	580b      	ldrlt	r3, [r1, r0]
 8008a60:	18c0      	addlt	r0, r0, r3
 8008a62:	4770      	bx	lr

08008a64 <_read_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	; (8008a84 <_read_r+0x20>)
 8008a68:	4604      	mov	r4, r0
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	602a      	str	r2, [r5, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f7f8 f8ea 	bl	8000c4c <_read>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_read_r+0x1e>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_read_r+0x1e>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	20001eac 	.word	0x20001eac

08008a88 <_init>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr

08008a94 <_fini>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr
